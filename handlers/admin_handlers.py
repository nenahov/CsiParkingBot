import re

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.formatting import Text, TextLink, Bold, as_marked_section, as_key_value
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from handlers.driver_callback import add_button, MyCallback
from models.driver import Driver
from models.user_audit import UserActionType
from services.audit_service import AuditService
from services.driver_service import DriverService
from services.notification_sender import EventType, NotificationSender, send_reply
from services.param_service import ParamService
from services.parking_service import ParkingService
from utils.cars_generator import cars_count

router = Router()


@router.message(Command("set_param"), flags={"check_admin": True})
async def set_param_handler(message: Message, param_service: ParamService):
    try:
        _, key, value = message.text.split(maxsplit=2)
        response = await param_service.set_parameter(key, value)
        await message.answer(response)
    except ValueError:
        await message.answer("–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /set_param <–∫–ª—é—á> <–∑–Ω–∞—á–µ–Ω–∏–µ>")


@router.message(Command("get_param"), flags={"check_admin": True})
async def get_param_handler(message: Message, param_service: ParamService):
    try:
        _, key = message.text.split(maxsplit=1)
        value = await param_service.get_parameter(key)
        await message.answer(f"{key} = {value}" if value else "–ü–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ValueError:
        await message.answer("–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /get_param <–∫–ª—é—á>")


@router.message(Command("list_params"), flags={"check_admin": True})
async def list_params_handler(message: Message, param_service: ParamService):
    params = await param_service.list_parameters()
    response = "\n".join(f"{k}: {v}" for k, v in params.items()) if params else "–ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
    await message.answer(response)


@router.message(
    F.text.regexp(r"(?i).*–Ω–∞—á–∏—Å–ª–∏—Ç—å.* ([+-]?\d+) .*–∫–∞—Ä–º—ã(.*)").as_("match"),
    flags={"check_admin": True, "check_driver": True})
async def plus_karma(message: Message, session: AsyncSession, driver: Driver, current_day, is_private, match: re.Match):
    if is_private:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return
    if not message.reply_to_message:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å –∫–∞—Ä–º—É.")
        return

    karma = int(match.group(1))  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª—è–µ–º–æ–π –∫–∞—Ä–º—ã
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–∞–Ω –æ—Ç–≤–µ—Ç
    replied_user_id = message.reply_to_message.from_user.id
    driver_to = await DriverService(session).get_by_chat_id(replied_user_id)
    if driver_to:
        driver_to.attributes["karma"] = driver_to.get_karma() + karma
        await message.answer(
            f"{'üíñ' if karma >= 0 else 'üíî'} {driver_to.description} –ø–æ–ª—É—á–∞–µ—Ç {'+' if karma >= 0 else '-'}{karma} –∫–∞—Ä–º—ã.")
        await NotificationSender(message.bot).send_to_driver(EventType.KARMA_CHANGED, driver, driver_to,
                                                             add_message=match.group(2), karma_change=karma)
        await AuditService(session).log_action(driver_to.id, UserActionType.GET_ADMIN_KARMA, current_day, karma,
                                               f"–ê–¥–º–∏–Ω {driver.title} –∏–∑–º–µ–Ω–∏–ª –∫–∞—Ä–º—É {driver_to.title} –Ω–∞ {karma} –∏ —Å—Ç–∞–ª–æ {driver_to.get_karma()}")
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—à–µ–ª—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


@router.message(
    F.text.regexp(r"(?i).*—Å–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π").as_("match"),
    flags={"check_admin": True, "check_driver": True})
async def disabled_drivers(message: Message, session: AsyncSession, current_day, match: re.Match):
    drivers = await DriverService(session).get_inactive_drivers()
    if not drivers:
        await message.answer("–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    response = "\n".join(f"{driver.id} - {driver.description}" for driver in drivers)
    await message.answer(response)


@router.message(
    F.text.regexp(r"(?i).*–ø–æ–∏—Å–∫ –≤–æ–¥–∏—Ç–µ–ª—è (.*)").as_("match"),
    flags={"check_admin": True, "check_driver": True})
async def find_driver(message: Message, session: AsyncSession, current_day, match: re.Match):
    text = match.group(1)
    drivers = await DriverService(session).find_by_text(text)
    if not drivers:
        await message.answer("–í–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞—à–ª–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    if len(drivers) > 1:
        response = "\n".join(f"{driver.id} - {driver.description}" for driver in drivers)
        await message.answer(response)
        return

    content, builder = await get_user_info(current_day, drivers[0], session)
    await message.answer(**content.as_kwargs(), reply_markup=builder.as_markup())


@router.callback_query(MyCallback.filter(F.action == "enable-user"),
                       flags={"check_admin": True, "check_driver": True})
async def enable_user(callback: CallbackQuery, callback_data: MyCallback, session, driver: Driver, current_day):
    user_id = callback_data.spot_id
    enabled = callback_data.day_num
    user = await DriverService(session).get_by_id(user_id)
    if user:
        user.enabled = enabled
        await AuditService(session).log_action(user.id, UserActionType.ENABLED, current_day, num=enabled,
                                               description=f"–ê–¥–º–∏–Ω {driver.title} {'–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª' if enabled == 0 else '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª'} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.title}")
        content, builder = await get_user_info(current_day, user, session)
        await send_reply(callback, content, builder)


@router.callback_query(MyCallback.filter(F.action == "extra-cars"),
                       flags={"check_admin": True, "check_driver": True})
async def extra_cars(callback: CallbackQuery, callback_data: MyCallback, session, current_day):
    user_id = callback_data.spot_id
    extra_cars = callback_data.day_num
    user = await DriverService(session).get_by_id(user_id)
    if user:
        if user.attributes.get("extra_cars", 0) == extra_cars:
            return
        user.attributes["extra_cars"] = extra_cars
        if extra_cars <= 0 and user.attributes.get("car_index", 0) > cars_count:
            user.attributes["car_index"] = user.attributes.get("car_index_bkp",
                                                               user.attributes.get("car_index", user.id))
        elif extra_cars > 0:
            user.attributes["car_index_bkp"] = user.attributes.get("car_index", user.id)
        content, builder = await get_user_info(current_day, user, session)
        await send_reply(callback, content, builder)


@router.message(
    F.text.regexp(r"(?i).*–¥–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ (\d+) –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è (\d+)").as_("match"),
    flags={"check_admin": True, "check_driver": True})
async def add_spot(message: Message, session: AsyncSession, match: re.Match):
    spot_id = int(match.group(1))
    driver_id = int(match.group(2))
    spot = await ParkingService(session).get_spot_by_id(spot_id)
    driver = await DriverService(session).get_by_id(driver_id)
    if spot and driver:
        await session.refresh(driver, ["parking_spots"])
        if spot in driver.parking_spots:
            await message.answer("–ú–µ—Å—Ç–æ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –º–µ—Å—Ç –≤–æ–¥–∏—Ç–µ–ª—è.")
            return
        driver.parking_spots.append(spot)
        await session.commit()
        await message.answer("–ú–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç –≤–æ–¥–∏—Ç–µ–ª—è.")
    else:
        await message.answer("–ú–µ—Å—Ç–æ –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞—à–ª–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


@router.message(
    F.text.regexp(r"(?i).*—É–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ (\d+) —É –≤–æ–¥–∏—Ç–µ–ª—è (\d+)").as_("match"),
    flags={"check_admin": True, "check_driver": True})
async def remove_spot(message: Message, session: AsyncSession, match: re.Match):
    spot_id = int(match.group(1))
    driver_id = int(match.group(2))
    spot = await ParkingService(session).get_spot_by_id(spot_id)
    driver = await DriverService(session).get_by_id(driver_id)
    if spot and driver:
        await session.refresh(driver, ["parking_spots"])
        if spot not in driver.parking_spots:
            await message.answer("–ú–µ—Å—Ç–æ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –º–µ—Å—Ç –≤–æ–¥–∏—Ç–µ–ª—è.")
            return
        driver.parking_spots.remove(spot)
        await session.commit()
        await message.answer("–ú–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç –≤–æ–¥–∏—Ç–µ–ª—è.")
    else:
        await message.answer("–ú–µ—Å—Ç–æ –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞—à–ª–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


async def get_user_info(current_day, user: Driver, session):
    await session.refresh(user, ["reservations", "parking_spots", "current_spots"])
    is_absent = user.is_absent(current_day)
    occupied_spots = user.get_occupied_spots()
    builder = InlineKeyboardBuilder()
    content = Text('ü™™ ', TextLink(user.title, url=f"tg://user?id={user.chat_id}"), "\n",
                   f"{user.id} - {user.description}", '\n\n')

    if not user.enabled:
        content += Bold("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω") + '\n\n'
        add_button("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "enable-user", 0, builder, spot_id=user.id, day_num=1)
    else:
        add_button("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!", "enable-user", 0, builder, spot_id=user.id, day_num=0)

    if is_absent:
        content += Bold("–ü—Ä–∏–µ–¥–µ—Ç –Ω–µ —Ä–∞–Ω—å—à–µ: ") + user.absent_until.strftime('%a %d.%m.%Y') + '\n\n'
    if occupied_spots:
        content += Bold("–°—Ç–æ–∏—Ç –Ω–∞: üÖøÔ∏è ") + ", ".join([str(spot.id) for spot in occupied_spots]) + '\n\n'
    if user.my_spots():
        content += as_marked_section(
            Bold(f"–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:"),
            *[f"{spot.id}" for spot in user.my_spots()],
            marker="‚Ä¢ ", )
    else:
        content += Bold("–ù–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç")

    builder.add(InlineKeyboardButton(text="üÖøÔ∏è –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ",
                                     switch_inline_query_current_chat=f"–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ N –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è {user.id}"))
    builder.add(InlineKeyboardButton(text="üÖøÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ",
                                     switch_inline_query_current_chat=f"–£–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ N —É –≤–æ–¥–∏—Ç–µ–ª—è {user.id}"))

    if user.attributes.get("p_state"):
        builder.add(InlineKeyboardButton(text="üó∫Ô∏è –î–æ–±–µ—Ä–∏—Å—å –¥–æ üÖøÔ∏è",
                                         switch_inline_query_current_chat=f"–ü–æ–∫–∞–∑–∞—Ç—å –î–æ–±–µ—Ä–∏—Å—å –¥–æ –ø–∞—Ä–∫–æ–≤–∫–∏ {user.id}"))

    content += '\n\n'
    content += as_key_value("–ú–∞—à–∏–Ω–∫–∞", user.attributes.get("car_index", user.id))
    content += '\n'
    content += as_key_value("Backup –º–∞—à–∏–Ω–∫–∞",
                            user.attributes.get("car_index_bkp", user.attributes.get("car_index", user.id)))
    content += '\n'
    content += as_key_value("–î–æ–ø. –º–∞—à–∏–Ω–∫–∏", "–≤—ã–∫–ª—é—á–µ–Ω—ã" if user.attributes.get("extra_cars", 0) <= 0 else "–≤–∫–ª—é—á–µ–Ω—ã")
    if user.attributes.get("extra_cars", 0) <= 0:
        add_button("üèéÔ∏è –í–∫–ª—é—á–∏—Ç—å –¥–æ–ø. –º–∞—à–∏–Ω–∫–∏", "extra-cars", 0, builder, spot_id=user.id, day_num=1)
    else:
        add_button("‚ùå –í—ã–∫–ª—é—á–∏—Ç—å –¥–æ–ø. –º–∞—à–∏–Ω–∫–∏", "extra-cars", 0, builder, spot_id=user.id, day_num=0)

    content += '\n\n'
    content += as_key_value("–ö–∞—Ä–º–∞", user.get_karma())

    builder.adjust(1, 2, 1)
    return content, builder
