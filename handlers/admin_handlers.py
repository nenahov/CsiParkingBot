import re

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession

from services.driver_service import DriverService
from services.param_service import ParamService

router = Router()


@router.message(Command("set_param"), flags={"check_admin": True})
async def set_param_handler(message: Message, param_service: ParamService):
    try:
        _, key, value = message.text.split(maxsplit=2)
        response = await param_service.set_parameter(key, value)
        await message.answer(response)
    except ValueError:
        await message.answer("–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /set_param <–∫–ª—é—á> <–∑–Ω–∞—á–µ–Ω–∏–µ>")


@router.message(Command("get_param"), flags={"check_admin": True})
async def get_param_handler(message: Message, param_service: ParamService):
    try:
        _, key = message.text.split(maxsplit=1)
        value = await param_service.get_parameter(key)
        await message.answer(f"{key} = {value}" if value else "–ü–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ValueError:
        await message.answer("–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /get_param <–∫–ª—é—á>")


@router.message(Command("list_params"), flags={"check_admin": True})
async def list_params_handler(message: Message, param_service: ParamService):
    params = await param_service.list_parameters()
    response = "\n".join(f"{k}: {v}" for k, v in params.items()) if params else "–ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
    await message.answer(response)


@router.message(
    F.text.regexp(r"(?i).*–Ω–∞—á–∏—Å–ª–∏—Ç—å.*(\d+).*–∫–∞—Ä–º").as_("match"), flags={"check_admin": True})
async def absent(message: Message, session: AsyncSession, is_private, match: re.Match):
    if message.reply_to_message:
        karma = int(match.group(1))  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª—è–µ–º–æ–π –∫–∞—Ä–º—ã
        # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–∞–Ω –æ—Ç–≤–µ—Ç
        replied_user_id = message.reply_to_message.from_user.id
        driver = await DriverService(session).get_by_chat_id(replied_user_id)
        if driver:
            driver.attributes['karma'] = driver.attributes.get('karma', 0) + karma
            await message.answer(f"{'üíñ' if karma > 0 else 'üíî'} {driver.description} –ø–æ–ª—É—á–∞–µ—Ç {karma} –∫–∞—Ä–º—ã.")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—à–µ–ª—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å –∫–∞—Ä–º—É.")
