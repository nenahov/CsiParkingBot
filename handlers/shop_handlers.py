import logging
import re
from datetime import datetime
from typing import Optional, List, Tuple, Dict

from aiogram import Router, F
from aiogram.types import Message
from aiogram.utils.formatting import Text, Bold, Code, HashTag, Italic, TextLink
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from handlers.driver_callback import add_button, MyCallback
from models.driver import Driver
from models.user_audit import UserActionType
from services.audit_service import AuditService
from services.driver_service import DriverService
from services.notification_sender import send_reply, send_alarm

router = Router()
logger = logging.getLogger(__name__)

def get_cost(price):
    vat = max(1, round(price * 0.1))
    return price + vat


@router.message(
    F.text.regexp(r"(?i).*–Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω –¥–æ–±—Ä—ã—Ö –¥–µ–ª.*"),
    flags={"lock_operation": "shop", "check_driver": True})
async def new_shop(message: Message, session: AsyncSession, driver: Driver, current_day, is_private):
    if not is_private:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –æ–±—â–∏—Ö —á–∞—Ç–∞—Ö.")
        return

    items = parse_items(message.text)
    driver.attributes["shop_id"] = 1 + driver.attributes.get("shop_id", 0)
    driver.attributes["shop_items"] = items

    await AuditService(session).log_action(driver.id, UserActionType.SHOP, current_day, len(items),
                                           f'{driver.title} —Å–æ–∑–¥–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω –¥–æ–±—Ä—ã—Ö –¥–µ–ª —Å {len(items)} –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏')

    builder = await get_shop_keyboard(driver, items)
    content = Bold("–ú–∞–≥–∞–∑–∏–Ω –¥–æ–±—Ä—ã—Ö –¥–µ–ª —Å–æ–∑–¥–∞–Ω!")
    content += '\n\n'
    content += Text("–ß—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –µ–≥–æ –≤ —á–∞—Ç–µ - –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É: ")
    content += Code("–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω")
    content += '\n\n'
    content += Text("–ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –µ–≥–æ - –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É (–º–æ–∂–Ω–æ –∏ –≤ –õ–°): ")
    content += Code("–ó–∞–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω")
    content += Text("\n–ò–ª–∏ ") + Code("–ù–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω –¥–æ–±—Ä—ã—Ö –¥–µ–ª") + Text(" –≤ –õ–° –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤.")
    content += '\n\n'
    content += Text("–ö–Ω–æ–ø–∫–∞ ") + Bold("'‚ùé –°–≤–µ—Ä–Ω—É—Ç—å –ª–∞–≤–æ—á–∫—É'") + Text(" —Å–∫—Ä—ã–≤–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω –≤ —á–∞—Ç–µ.\n")
    content += Text("–ó–∞–Ω–æ–≤–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π ") + Code("–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω") + Text(".")
    content += '\n\n'
    content += Text("–ü—Ä–∏—è—Ç–Ω—ã—Ö –¥–æ–±—Ä—ã—Ö –¥–µ–ª!")
    content += '\n\n'
    content += Italic("–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω –ù–î–° 10% (–º–∏–Ω–∏–º—É–º 1 üíü).")
    content += '\n\n'
    content += HashTag("#–º–∞–≥–∞–∑–∏–Ω")
    await send_reply(message, content, builder)


@router.message(
    F.text.regexp(r"(?i).*–æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω"),
    flags={"lock_operation": "shop", "check_driver": True})
async def show_shop(message: Message, session: AsyncSession, driver: Driver, current_day, is_private):
    items = driver.attributes.get("shop_items", [])
    if not items:
        await send_alarm(message, "‚ö†Ô∏è –ú–∞–≥–∞–∑–∏–Ω –Ω–µ —Å–æ–∑–¥–∞–Ω")
        return
    content, builder = await get_shop_content_and_keyboard(driver, is_private)
    await send_reply(message, content, builder)
    if not is_private:
        await AuditService(session).log_action(driver.id, UserActionType.SHOP, current_day, 0,
                                               f'{driver.title} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω –¥–æ–±—Ä—ã—Ö –¥–µ–ª')


@router.message(
    F.text.regexp(r"(?i).*–∑–∞–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω"),
    flags={"lock_operation": "shop", "check_driver": True})
async def close_shop(message: Message, session: AsyncSession, driver: Driver, current_day, is_private):
    items = []
    driver.attributes["shop_id"] = 1 + driver.attributes.get("shop_id", 0)
    driver.attributes["shop_items"] = items

    await AuditService(session).log_action(driver.id, UserActionType.SHOP, current_day, len(items),
                                           f'{driver.title} –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω –¥–æ–±—Ä—ã—Ö –¥–µ–ª')
    builder = InlineKeyboardBuilder()
    await send_reply(message, Bold("‚úñÔ∏è –ú–∞–≥–∞–∑–∏–Ω –∑–∞–∫—Ä—ã—Ç!"), builder)


@router.callback_query(MyCallback.filter(F.action == "hide-shop"),
                       flags={"lock_operation": "shop", "check_driver": True, "check_callback": True})
async def hide_shop(callback, session, driver, current_day, is_private):
    try:
        await send_alarm(callback, "‚ùé –ú–∞–≥–∞–∑–∏–Ω —Å–∫—Ä—ã—Ç!\n\n–ü–æ–∫–∞–∂–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã '–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω'")
        await callback.message.delete()

        if not is_private:
            await AuditService(session).log_action(driver.id, UserActionType.SHOP, current_day, 0,
                                                   f'{driver.title} —Å–∫—Ä—ã–≤–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω –¥–æ–±—Ä—ã—Ö –¥–µ–ª')

    except:
        pass


@router.callback_query(MyCallback.filter(F.action == "buy-item"),
                       flags={"lock_operation": "shop", "check_driver": True})
async def buy_item(callback, callback_data: MyCallback, session, driver, current_day, is_private):
    seller = await DriverService(session).get_by_chat_id(callback_data.user_id)
    if not seller:
        await send_alarm(callback, "‚ö†Ô∏è –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.message.delete()
        return
    if callback_data.spot_id != seller.attributes.get("shop_id", 0):
        await send_alarm(callback, "‚ö†Ô∏è –ü—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–∏–∫—Ä—ã–ª –ª–∞–≤–æ—á–∫—É")
        await callback.message.delete()
        return
    items = seller.attributes["shop_items"]
    if items is None or callback_data.day_num >= len(items):
        await send_alarm(callback, "‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.message.delete()
        return

    item = items[callback_data.day_num]
    if item["count"] is not None and item["count"] <= item.get("sold", 0):
        await send_alarm(callback, "‚ö†Ô∏è –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
        content, builder = await get_shop_content_and_keyboard(seller, is_private)
        await send_reply(callback, content, builder)
        return

    if seller.id == driver.id:
        await send_alarm(callback, "‚ö†Ô∏è –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —É —Å–µ–±—è")
        return

    if get_cost(item["price"]) > driver.get_karma():
        await send_alarm(callback, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä–º—ã")
        return

    driver.attributes["karma"] = driver.get_karma() - get_cost(item["price"])
    seller.attributes["karma"] = seller.get_karma() + item["price"]
    await AuditService(session).log_action(driver.id, UserActionType.SHOP_KARMA, current_day, -get_cost(item["price"]),
                                           f'{driver.title} –∫—É–ø–∏–ª —Ç–æ–≤–∞—Ä "{item["description"]}" —É {seller.title}')
    await AuditService(session).log_action(seller.id, UserActionType.SHOP_KARMA, current_day, item["price"],
                                           f'{seller.title} –ø—Ä–æ–¥–∞–ª —Ç–æ–≤–∞—Ä "{item["description"]}" {driver.title}')
    item["sold"] = item.get("sold", 0) + 1
    seller.attributes["shop_items"] = items
    await AuditService(session).log_action(driver.id, UserActionType.SHOP, current_day, 1,
                                           f'{driver.title} –∫—É–ø–∏–ª —Ç–æ–≤–∞—Ä "{item["description"]}" —É {seller.title}')
    await AuditService(session).log_action(seller.id, UserActionType.SHOP, current_day, -1,
                                           f'{seller.title} –ø—Ä–æ–¥–∞–ª —Ç–æ–≤–∞—Ä "{item["description"]}" {driver.title}')
    await send_alarm(callback,
                     f"‚úÖ '{item['description']}' –∫—É–ø–ª–µ–Ω!\n\n–ü—Ä–æ–¥–∞–≤–µ—Ü: {seller.title}\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {driver.get_karma()} üíü")
    content, builder = await get_shop_content_and_keyboard(seller, is_private)
    await send_reply(callback, content, builder)
    try:
        await callback.bot.send_message(chat_id=driver.chat_id,
                                        text=f"‚úÖ '{item['description']}' –∫—É–ø–ª–µ–Ω –∑–∞ {get_cost(item['price'])} üíü\n\n–ü—Ä–æ–¥–∞–≤–µ—Ü: {seller.title}\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {driver.get_karma()} üíü")
    except Exception as e:
        logging.error(f"Error in send message: {e}")
    try:
        await callback.bot.send_message(chat_id=seller.chat_id,
                                        text=f"‚úÖ '{item['description']}' –ø—Ä–æ–¥–∞–Ω –∑–∞ {item['price']} üíü\n\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {driver.title}\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {seller.get_karma()} üíü")
    except Exception as e:
        logging.error(f"Error in send message: {e}")


async def get_shop_content_and_keyboard(driver, is_private):
    content = Text("")
    if is_private:
        content += Italic("‚ÄºÔ∏è–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ–±—â–µ–º —á–∞—Ç–µ!")
        content += '\n\n\n'
    is_woman = driver.attributes.get("gender", "M") == "F"
    content += TextLink(driver.description, url=f"tg://user?id={driver.chat_id}")
    content += Text(f" –æ—Ç–∫—Ä—ã–ª{'–∞' if is_woman else ''} ")
    content += Bold(f"–ú–∞–≥–∞–∑–∏–Ω –¥–æ–±—Ä—ã—Ö –¥–µ–ª ü´∂")
    content += '\n\n'
    content += Text("–ü—Ä–∏—è—Ç–Ω—ã—Ö –¥–æ–±—Ä—ã—Ö –¥–µ–ª!")
    content += '\n\n'
    content += Italic("–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω –ù–î–° 10% (–º–∏–Ω–∏–º—É–º 1 üíü).")
    content += '\n\n'
    content += HashTag("#–º–∞–≥–∞–∑–∏–Ω")
    content += '\n\n'
    content += Italic(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    builder = await get_shop_keyboard(driver, driver.attributes.get("shop_items", []))
    return content, builder


async def get_shop_keyboard(driver, items):
    builder = InlineKeyboardBuilder()
    for idx, item in enumerate(items):
        is_sold_out = item["count"] is not None and item["count"] <= item.get("sold", 0)
        if is_sold_out:
            add_button(f"‚ùé ‚Üí {item['description']} "
                       f"[{(str(item['count'] - item.get("sold", 0)) + " / " + str(item['count']))}]",
                       "pass", driver.chat_id, builder,
                       spot_id=driver.attributes.get("shop_id", 0),
                       day_num=idx)
            continue
        add_button(f"{get_cost(item['price'])} üíü ‚Üí {item['description']} "
                   f"[{"‚àû" if item['count'] is None else (str(item['count'] - item.get("sold", 0)) + " / " + str(item['count']))}]",
                   "buy-item", driver.chat_id, builder,
                   spot_id=driver.attributes.get("shop_id", 0),
                   day_num=idx)
    add_button("‚ùé –°–≤–µ—Ä–Ω—É—Ç—å –ª–∞–≤–æ—á–∫—É", "hide-shop", driver.chat_id, builder)
    builder.adjust(1)
    return builder


def parse_line(line: str) -> Tuple[int, str, Optional[int]]:
    """
    –†–∞–∑–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞:
        <—Ü–µ–Ω–∞> - <–æ–ø–∏—Å–∞–Ω–∏–µ> (<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>)
    –∏–ª–∏ –±–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:
        <—Ü–µ–Ω–∞> - <–æ–ø–∏—Å–∞–Ω–∏–µ>

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç
        price: int
        description: str
        count: Optional[int]

    –ü—Ä–∏–º–µ—Ä—ã:
        parse_line("1 - –ø–æ–¥–µ–ª—é—Å—å –∫–æ–Ω—Ñ–µ—Ç–∫–æ–π (5)")  # (1, "–ø–æ–¥–µ–ª—é—Å—å –∫–æ–Ω—Ñ–µ—Ç–∫–æ–π", 5)
        parse_line("2 - –æ–±–Ω–∏–º–∞—à–∫–∏")               # (2, "–æ–±–Ω–∏–º–∞—à–∫–∏", None)
    """
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: –≥—Ä—É–ø–ø–∞ 1 ‚Äî —Ü–µ–Ω–∞, –≥—Ä—É–ø–ø–∞ 2 ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ, –≥—Ä—É–ø–ø–∞ 3 ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    pattern = r"^\s*(\d+)\s*-\s*(.+?)(?:\s*\((\d+)\))?\s*$"
    match = re.match(pattern, line)
    if not match:
        return 0, "–°—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É", None

    price = int(match.group(1))
    description = match.group(2).strip()
    count = int(match.group(3)) if match.group(3) is not None else None
    return price, description, count


def parse_items(text: str) -> List[Dict[str, Optional[int]]]:
    """
    –†–∞–∑–±–∏—Ä–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Ç–µ–∫—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏:
        - price: int
        - description: str
        - count: Optional[int]

    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏.
    """
    result = []
    for raw_line in text.splitlines():
        line = raw_line.strip()
        if not line:
            continue
        price, desc, count = parse_line(line)
        if price > 0:
            result.append({"price": price, "description": desc, "count": count, })
    return result
