import re
from datetime import datetime, timedelta
from io import BytesIO

from aiogram import Router, F
from aiogram.filters import Command, or_f
from aiogram.types import Message, BufferedInputFile, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from models.driver import Driver
from services.parking_service import ParkingService
from utils.map_generator import generate_parking_map

router = Router()


@router.message(F.text.regexp(r"^(\d+)$").as_("digits"), flags={"check_driver": True})
async def any_digits_handler(message: Message, digits: re.Match[str]):
    await message.answer(str(digits))


@router.message(F.text.regexp(r"(?i)(.*–ø–æ–∫–∞.* –∫–∞—Ä—Ç(–∞|—É) –Ω–∞ –∑–∞–≤—Ç—Ä–∞)|(.*–∫–∞—Ä—Ç(–∞|—É) –ø–∞—Ä–∫–æ–≤–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞)"),
                flags={"long_operation": "upload_photo", "check_driver": True})
async def map_tomorrow_command(message: Message, session, driver, current_day, is_private):
    day = current_day + timedelta(days=1)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã
    parking_service = ParkingService(session)
    spots, reservations = await parking_service.get_spots_with_reservations(day)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
    img = generate_parking_map(
        parking_spots=spots,
        reservations_data=reservations,
        driver=driver if is_private else None,
        use_spot_status=False
    )

    img_buffer = BytesIO()
    img.save(img_buffer, format="PNG")
    img_buffer.seek(0)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await message.answer_photo(
        BufferedInputFile(img_buffer.getvalue(), filename="map.png"),
        caption=f"–ö–∞—Ä—Ç–∞ –ø–∞—Ä–∫–æ–≤–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ {day.strftime('%d.%m.%Y')}\n\n"
                f"üî¥ - –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ\n"
                f"{'üü° - –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –í–∞–º–∏\n' if is_private else ''}"
                f"üü¢ - —Å–≤–æ–±–æ–¥–Ω–æ"
    )
    if is_private:
        await spot_selection(message, session, driver, True)

@router.message(or_f(Command("map"), F.text.regexp(r"(?i)(.*–ø–æ–∫–∞.* –∫–∞—Ä—Ç(–∞|—É))|(.*–∫–∞—Ä—Ç(–∞|—É) –ø–∞—Ä–∫–æ–≤–∫–∏)")),
                flags={"long_operation": "upload_photo", "check_driver": True})
async def map_command(message: Message, session, driver, current_day, is_private):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã
    parking_service = ParkingService(session)
    spots, reservations = await parking_service.get_spots_with_reservations(current_day)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
    img = generate_parking_map(
        parking_spots=spots,
        reservations_data=reservations,
        driver=driver if is_private else None
    )

    img_buffer = BytesIO()
    img.save(img_buffer, format="PNG")
    img_buffer.seek(0)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await message.answer_photo(
        BufferedInputFile(img_buffer.getvalue(), filename="map.png"),
        caption=f"–ö–∞—Ä—Ç–∞ –ø–∞—Ä–∫–æ–≤–∫–∏ –Ω–∞ {current_day.strftime('%d.%m.%Y')}.\n"
                f"(–û–±–Ω–æ–≤–ª–µ–Ω–æ {datetime.now().strftime('%d.%m.%Y %H:%M')})\n\n"
                f"üî¥ - –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ\n"
                f"{'üü° - –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –í–∞–º–∏\n' if is_private else ''}"
                f"üü¢ - —Å–≤–æ–±–æ–¥–Ω–æ"
    )
    if is_private:
        await spot_selection(message, session, driver, True)


@router.callback_query(F.data.startswith("edit_schedule"), flags={"check_driver": True})
async def handle_spot_selection(callback: CallbackQuery, session, driver):
    await spot_selection(callback.message, session, driver, True)
    await callback.answer()


@router.callback_query(F.data.startswith("choose-spots"), flags={"check_driver": True})
async def handle_spot_selection(callback: CallbackQuery, session, driver):
    await spot_selection(callback.message, session, driver, False)


async def spot_selection(message: Message, session, driver: Driver, is_new: bool):
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç
    builder = InlineKeyboardBuilder()
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã
    spots = driver.my_spots()

    if not spots:
        builder.button(
            text=f"–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å",
            switch_inline_query_current_chat=f"–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å"
        )
        await message.answer(
            f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é.",
            reply_markup=builder.as_markup()
        )
        return

    spots = spots
    for spot in sorted(spots, key=lambda s: s.id):
        builder.button(
            text=f"{spot.id}",
            callback_data=f"select-spot_{spot.id}"
        )
    builder.adjust(3)

    if is_new:
        await message.answer(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
    else:
        await message.edit_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
