import json
from datetime import datetime, timedelta
from io import BytesIO

from aiogram import Router, F
from aiogram.filters import Command, or_f
from aiogram.types import Message, BufferedInputFile, CallbackQuery
from aiogram.utils.formatting import Text, Bold, Code
from aiogram.utils.keyboard import InlineKeyboardBuilder

from handlers.driver_callback import add_button, MyCallback
from models.driver import Driver
from services.param_service import ParamService
from services.parking_service import ParkingService
from services.queue_service import QueueService
from utils.map_generator import generate_parking_map

router = Router()


@router.message(F.text.regexp(r"(?i)(.*–ø–æ–∫–∞.* –∫–∞—Ä—Ç(–∞|—É) –Ω–∞ –∑–∞–≤—Ç—Ä–∞)|(.*–∫–∞—Ä—Ç(–∞|—É) –ø–∞—Ä–∫–æ–≤–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞)"),
                flags={"long_operation": "upload_photo", "check_driver": True})
async def map_tomorrow_command(message: Message, session, driver, current_day, is_private):
    day = current_day + timedelta(days=1)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã
    parking_service = ParkingService(session)
    spots, reservations = await parking_service.get_spots_with_reservations(day)
    frame_index = await get_frame_index(message, session)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
    img = await generate_parking_map(parking_spots=spots, reservations_data=reservations,
                               driver=driver if is_private else None,
                                     use_spot_status=False, frame_index=frame_index,
                                     day=day
                                     )

    img_buffer = BytesIO()
    img.save(img_buffer, format="PNG")
    img_buffer.seek(0)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await message.answer_photo(
        BufferedInputFile(img_buffer.getvalue(), filename="map.png"),
        caption=f"–ö–∞—Ä—Ç–∞ –ø–∞—Ä–∫–æ–≤–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ {day.strftime('%a %d.%m.%Y')}\n\n"
                f"üî¥ - –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ\n"
                f"{'üü° - –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –í–∞–º–∏\n' if is_private else ''}"
                f"üü¢ - —Å–≤–æ–±–æ–¥–Ω–æ"
    )
    if is_private:
        await spot_selection(message, session, driver, True)


@router.message(or_f(Command("map"), F.text.regexp(r"(?i)(.*–ø–æ–∫–∞.* –∫–∞—Ä—Ç(–∞|—É))|(.*–∫–∞—Ä—Ç(–∞|—É) –ø–∞—Ä–∫–æ–≤–∫–∏)")),
                flags={"long_operation": "upload_photo", "check_driver": True})
async def map_command(message: Message, session, driver, current_day, is_private):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã
    parking_service = ParkingService(session)
    spots, reservations = await parking_service.get_spots_with_reservations(current_day)
    frame_index = await get_frame_index(message, session)
    for spot in spots:
        await session.refresh(spot, ["current_driver"])
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
    img = await generate_parking_map(
        parking_spots=spots,
        reservations_data=reservations,
        driver=driver if is_private else None,
        frame_index=frame_index,
        day=current_day
    )

    img_buffer = BytesIO()
    img.save(img_buffer, format="PNG")
    img_buffer.seek(0)

    builder = InlineKeyboardBuilder()
    if is_private:
        add_button("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ...", "edit-schedule", driver.chat_id, builder)

    queue_service = QueueService(session)
    queue_all = await queue_service.get_all()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await message.answer_photo(
        BufferedInputFile(img_buffer.getvalue(), filename="map.png"),
        caption=f"–ö–∞—Ä—Ç–∞ –ø–∞—Ä–∫–æ–≤–∫–∏ –Ω–∞ {current_day.strftime('%a %d.%m.%Y')}.\n"
                f"(–û–±–Ω–æ–≤–ª–µ–Ω–æ {datetime.now().strftime('%d.%m.%Y %H:%M')})\n\n"
                f"üî¥ - –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ\n"
                f"{'üü° - –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –í–∞–º–∏\n' if is_private else ''}"
                f"üü¢ - —Å–≤–æ–±–æ–¥–Ω–æ\n\n"
                f"–í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(queue_all)} —á–µ–ª–æ–≤–µ–∫(–∞)\n"
        # –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏
                f"{''.join(f'‚Ä¢ {queue.driver.description}{(" ‚ùóÔ∏èüèÜ ‚ùóÔ∏è " + str(queue.spot_id) + " –º–µ—Å—Ç–æ –¥–æ " + queue.choose_before.strftime('%H:%M')) if queue.spot_id else ''}\n' for queue in queue_all)}",
        reply_markup=builder.as_markup()
    )


async def get_frame_index(message, session):
    param_service = ParamService(session)
    chat_id = message.chat.id
    frames_json = await param_service.get_parameter("map_frame_index", '{}')
    frames = json.loads(frames_json)
    frame_index = frames.get(str(chat_id), -1) + 1
    frames[str(chat_id)] = frame_index
    await param_service.set_parameter("map_frame_index", json.dumps(frames))
    return frame_index


@router.callback_query(MyCallback.filter(F.action == "edit-schedule"),
                       flags={"check_driver": True, "check_callback": True})
async def handle_spot_selection(callback: CallbackQuery, session, driver):
    await spot_selection(callback.message, session, driver, True)
    await callback.answer()


@router.callback_query(MyCallback.filter(F.action == "choose-spots"),
                       flags={"check_driver": True, "check_callback": True})
async def handle_spot_selection(callback: CallbackQuery, session, driver):
    await spot_selection(callback.message, session, driver, False)


async def spot_selection(message: Message, session, driver: Driver, is_new: bool):
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç
    builder = InlineKeyboardBuilder()
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã
    await session.refresh(driver, ["reservations", "parking_spots"])
    spots = driver.my_spots()

    if not spots:
        builder.button(
            text=f"–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å",
            switch_inline_query_current_chat=f"–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å"
        )
        await message.answer(
            f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é.",
            reply_markup=builder.as_markup()
        )
        return

    for spot in spots:
        add_button(f"{spot.id}", "select-spot", driver.chat_id, builder, spot.id)
    builder.adjust(3)

    reservations = driver.reservations

    content = Text(
        "üìÖ –¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∫–æ–≤–∫—É –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏.\n\n",
        Text(*[
            elem for day, num in [
                ("–ü–Ω", 0), ("–í—Ç", 1), ("–°—Ä", 2),
                ("–ß—Ç", 3), ("–ü—Ç", 4), ("–°–±", 5), ("–í—Å", 6)
            ]
            for elem in (
                Code(
                    f"{day}\t..\t" + (
                        ', '.join(f"{res.parking_spot_id}"
                                  for res in reservations
                                  if res.day_of_week == num)
                        if any(res.day_of_week == num for res in reservations)
                        else "—É –í–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
                    )
                ),
                "\n"
            )
        ]),
        Bold("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:"))

    if is_new:
        await message.answer(
            **content.as_kwargs(),
            reply_markup=builder.as_markup()
        )
    else:
        await message.edit_text(
            **content.as_kwargs(),
            reply_markup=builder.as_markup()
        )
