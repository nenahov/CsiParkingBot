import re
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.filters import Command, or_f
from aiogram.types import Message, InlineKeyboardButton
from aiogram.utils.formatting import Text, TextLink, Bold
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from models.driver import Driver
from services.driver_service import DriverService
from services.queue_service import QueueService

router = Router()


@router.message(or_f(Command("status"), F.text.regexp(r"(?i)(.*–º–æ–π —Å—Ç–∞—Ç—É—Å)|(.*–ø–æ–∫–∞.* —Å—Ç–∞—Ç—É—Å)")),
                flags={"check_driver": True})
async def show_status(message: Message, session: AsyncSession, driver: Driver, is_private):
    today = datetime.today().date()
    is_absent = (driver.absent_until is not None) and (driver.absent_until > today)

    queue_service = QueueService(session)
    queue_index = await queue_service.get_driver_queue_index(driver)

    builder = InlineKeyboardBuilder()

    if queue_index is not None:
        builder.add(
            InlineKeyboardButton(text="‚úã –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å", switch_inline_query_current_chat='–ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å'))
    else:
        builder.add(
            InlineKeyboardButton(text="üôã –í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å", switch_inline_query_current_chat='–í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å'))

    builder.add(InlineKeyboardButton(text="üöó –ü—Ä–∏–µ–¥—É", switch_inline_query_current_chat='–ü—Ä–∏–µ–¥—É —Å–µ–≥–æ–¥–Ω—è'))
    if is_absent:
        builder.add(InlineKeyboardButton(text="üöó –í–µ—Ä–Ω—É–ª—Å—è —Ä–∞–Ω—å—à–µ", switch_inline_query_current_chat='–í–µ—Ä–Ω—É–ª—Å—è —Ä–∞–Ω—å—à–µ'))
    else:
        builder.add(
            InlineKeyboardButton(text="ü´∂ –ù–µ –ø—Ä–∏–µ–¥—É —Å–µ–≥–æ–¥–Ω—è", switch_inline_query_current_chat='–ù–µ –ø—Ä–∏–µ–¥—É —Å–µ–≥–æ–¥–Ω—è'))

    if is_private:
        builder.add(InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='edit_schedule'))
        builder.add(InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='edit_profile'))
        builder.add(InlineKeyboardButton(text="üìù –ü–æ–º–æ—â—å", switch_inline_query_current_chat='–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã'))
    builder.adjust(1, 2, 1, 1)

    content = Text(TextLink(driver.title, url=f"tg://user?id={driver.chat_id}"), "\n",
                   f"\n"
                   f"{driver.description}\n"
                   f"\n",

                   Bold("–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞: "), f"{sorted([p.id for p in driver.parking_spots])}\n",

                   Bold("–ú–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏: ") if queue_index else '',
                   (str(queue_index) + '\n') if queue_index else '',

                   Bold("–ü—Ä–∏–µ–¥—É –Ω–µ —Ä–∞–Ω—å—à–µ: ") if is_absent else '',
                   (driver.absent_until.strftime('%d.%m.%Y') + '\n') if is_absent else '',

                   f"\n_–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ_",
                   f"\n")
    await message.answer(**content.as_kwargs(), reply_markup=builder.as_markup())


@router.message(
    F.text.regexp(
        r"(?i).*(((—É–µ—Ö–∞–ª.*–Ω–∞|–º–µ–Ω—è –Ω–µ –±—É–¥–µ—Ç|–±—É–¥—É –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å) (\d+) (–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π))|(–Ω–µ –ø—Ä–∏–µ–¥—É —Å–µ–≥–æ–¥–Ω—è)|(—É–∂–µ —É–µ—Ö–∞–ª))").as_(
        "match"),
    flags={"check_driver": True})
async def absent(message: Message, session: AsyncSession, driver: Driver, is_private, match: re.Match):
    if match.group(2):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ —á–∞—Å—Ç—å —Å "—É–µ—Ö–∞–ª"
        days = int(match.group(4))  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    else:  # –°—Ä–∞–±–æ—Ç–∞–ª–æ "–Ω–µ –ø—Ä–∏–µ–¥—É —Å–µ–≥–æ–¥–Ω—è"
        days = 1

    # –ø—Ä–∏–±–∞–≤–∏–º –∫ —Å–µ–≥–æ–¥–Ω—è 3 –¥–Ω—è –∏ –ø–æ–∫–∞–∂–µ–º –¥–∞—Ç—É
    today = datetime.today()
    date = today + timedelta(days=days)
    await DriverService(session).update_absent_until(driver.id, date)
    await message.reply(f"–í—ã —É–µ—Ö–∞–ª–∏ –¥–æ {date.strftime('%d.%m.%Y')}")


@router.message(F.text.regexp(r"(?i).*((–≤–µ—Ä–Ω—É–ª—Å—è —Ä–∞–Ω—å—à–µ)|(–ø—Ä–∏–µ–¥—É —Å–µ–≥–æ–¥–Ω—è))"),
                flags={"check_driver": True})
async def comeback(message: Message, session: AsyncSession, driver: Driver, is_private):
    today = datetime.today().date()
    if (driver.absent_until is not None) and (driver.absent_until > today):
        await DriverService(session).update_absent_until(driver.id, today)
        await message.reply(f"–í–∞—à–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
