import re
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.filters import Command, or_f
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram.utils.formatting import Text, TextLink, Bold, as_marked_section, as_key_value
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from models.driver import Driver
from models.parking_spot import SpotStatus
from services.parking_service import ParkingService
from services.queue_service import QueueService

router = Router()


@router.message(or_f(Command("status"), F.text.regexp(r"(?i)(.*–º–æ–π —Å—Ç–∞—Ç—É—Å)|(.*–ø–æ–∫–∞.* —Å—Ç–∞—Ç—É—Å)")),
                flags={"check_driver": True})
async def show_status(message: Message, session: AsyncSession, driver: Driver, current_day, is_private):
    content, builder = await get_status_message(driver, is_private, session, current_day)
    await message.answer(**content.as_kwargs(), reply_markup=builder.as_markup())


async def get_status_message(driver, is_private, session, current_day):
    is_absent = driver.is_absent(current_day)
    queue_service = QueueService(session)
    queue_index = await queue_service.get_driver_queue_index(driver)
    builder = InlineKeyboardBuilder()

    builder.add(InlineKeyboardButton(text="üöó –ü—Ä–∏–µ–¥—É", switch_inline_query_current_chat='–ü—Ä–∏–µ–¥—É —Å–µ–≥–æ–¥–Ω—è'))
    if is_absent:
        builder.add(InlineKeyboardButton(text="üöó –í–µ—Ä–Ω—É–ª—Å—è —Ä–∞–Ω—å—à–µ", callback_data="comeback_" + str(driver.chat_id)))
    else:
        builder.add(InlineKeyboardButton(text="ü´∂ –ù–µ –ø—Ä–∏–µ–¥—É", callback_data="absent_" + str(driver.chat_id)))
        if queue_index is not None:
            builder.add(
                InlineKeyboardButton(text="‚úã –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data="leave-queue_" + str(driver.chat_id)))
        else:
            builder.add(
                InlineKeyboardButton(text="üôã –í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å", callback_data="join-queue_" + str(driver.chat_id)))
    if driver.attributes.setdefault("plus", -1) > -1:
        builder.add(InlineKeyboardButton(text="üé∞ –†–æ–∑—ã–≥—Ä—ã—à –∫–∞—Ä–º—ã!",
                                         callback_data='plus-karma_' + str(driver.chat_id)))
    if is_private:
        builder.add(InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='edit-schedule'))
    builder.adjust(2, 1)

    parking_service = ParkingService(session)
    spots, reservations = await parking_service.get_spots_with_reservations(current_day)

    spots_info = as_marked_section(
        Bold(f"üÖøÔ∏è –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–∞ {current_day.strftime('%d.%m.%Y')}:"),
        *[as_key_value(f"{spot.id}", f"{await get_spot_info(spot, reservations)}")
          for spot in driver.my_spots()],
        marker="‚Ä¢ ", )

    content = Text(TextLink(driver.title, url=f"tg://user?id={driver.chat_id}"), "\n",
                   f"\n"
                   f"{driver.description}"
                   f"\n\n",
                   Bold("–ú–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏: ") if queue_index else '',
                   (str(queue_index) + '\n\n') if queue_index else '',

                   Bold("–ü—Ä–∏–µ–¥—É –Ω–µ —Ä–∞–Ω—å—à–µ: ") if is_absent else '',
                   (driver.absent_until.strftime('%d.%m.%Y') + '\n\n') if is_absent else '',

                   spots_info,

                   f"\n")
    return content, builder


async def get_spot_info(spot, reservations):
    if spot.status == SpotStatus.OCCUPIED:
        return f"–ó–∞–Ω—è—Ç–æ (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {spot.occupied_by})"
    elif spot.status == SpotStatus.OCCUPIED_WITHOUT_DEMAND:
        return f"–ó–ê–ù–Ø–¢–û (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {spot.reserved_by})"
    elif spot.status == SpotStatus.FREE:
        return '–°–í–û–ë–û–î–ù–û'

    # –∏—â–µ–º –≤—Å–µ—Ö –≤ reservations
    res_info = reservations.get(spot.id, [])
    if len(res_info) < 1:
        return '–°–≤–æ–±–æ–¥–Ω–æ'
    return "–†–µ–∑–µ—Ä–≤ —É " + ', '.join(res.driver.title for res in res_info)


@router.message(
    F.text.regexp(r"(?i).*((—É–µ—Ö–∞–ª.*–Ω–∞|–º–µ–Ω—è –Ω–µ –±—É–¥–µ—Ç|–±—É–¥—É –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å) (\d+) (–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π))").as_("match"),
    flags={"check_driver": True})
async def absent(message: Message, session: AsyncSession, driver: Driver, current_day, is_private, match: re.Match):
    days = int(match.group(3))  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    await absent_x_days(days, driver, message, session, current_day, is_private)


@router.message(
    or_f(Command("free"), F.text.regexp(r"(?i).*((–Ω–µ –ø—Ä–∏–µ–¥—É —Å–µ–≥–æ–¥–Ω—è)|(—É–∂–µ —É–µ—Ö–∞–ª))")), flags={"check_driver": True})
async def absent(message: Message, session: AsyncSession, driver: Driver, current_day, is_private):
    await absent_x_days(1, driver, message, session, current_day, is_private)


@router.message(F.text.regexp(r"(?i).*(–Ω–µ –ø—Ä–∏–µ–¥—É –∑–∞–≤—Ç—Ä–∞)"), flags={"check_driver": True})
async def absent(message: Message, session: AsyncSession, driver: Driver, current_day, is_private):
    await absent_x_days(2, driver, message, session, current_day, is_private)


@router.callback_query(F.data.startswith("absent_"), flags={"check_driver": True, "check_callback": True})
async def absent_callback(callback: CallbackQuery, session, driver, current_day, is_private):
    await absent_x_days(1, driver, callback, session, current_day, is_private)


async def absent_x_days(days, driver, event, session, current_day, is_private=False):
    # –ø—Ä–∏–±–∞–≤–∏–º –∫ —Å–µ–≥–æ–¥–Ω—è N –¥–Ω–µ–π –∏ –ø–æ–∫–∞–∂–µ–º –¥–∞—Ç—É
    date = current_day + timedelta(days=days)
    driver.absent_until = date
    await ParkingService(session).leave_spot(driver)
    await QueueService(session).leave_queue(driver)
    if isinstance(event, CallbackQuery):
        await event.answer(f"–í—ã —É–µ—Ö–∞–ª–∏ –¥–æ {date.strftime('%d.%m.%Y')}", show_alert=True)
    else:
        await event.reply(f"–í—ã —É–µ—Ö–∞–ª–∏ –¥–æ {date.strftime('%d.%m.%Y')}")
    if isinstance(event, CallbackQuery):
        content, builder = await get_status_message(driver, is_private, session, current_day)
        await event.message.edit_text(**content.as_kwargs(), reply_markup=builder.as_markup())


@router.message(or_f(Command("book"), F.text.regexp(r"(?i).*((–≤–µ—Ä–Ω—É–ª—Å—è —Ä–∞–Ω—å—à–µ)|(–ø—Ä–∏–µ–¥—É —Å–µ–≥–æ–¥–Ω—è))")),
                flags={"check_driver": True})
async def comeback(message: Message, session: AsyncSession, driver: Driver, current_day, is_private):
    await comeback_driver(driver, message, session, current_day, is_private)


@router.callback_query(F.data.startswith("comeback_"), flags={"check_driver": True, "check_callback": True})
async def comeback_callback(callback: CallbackQuery, session: AsyncSession, driver: Driver, current_day, is_private):
    await comeback_driver(driver, callback, session, current_day, is_private)


async def comeback_driver(driver, event, session, current_day, is_private=False):
    today = datetime.today().date()
    if driver.is_absent(today):
        driver.absent_until = today
        if isinstance(event, CallbackQuery):
            await event.answer(f"–í–∞—à–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", show_alert=True)
        else:
            await event.reply(f"–í–∞—à–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    # await event.reply(f"–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ... –ë—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–Ω—è—Ç—å –æ–¥–Ω–æ –∏–∑ –≤–∞—à–∏—Ö –º–µ—Å—Ç, –ª–∏–±–æ –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å.")

    if isinstance(event, CallbackQuery):
        content, builder = await get_status_message(driver, is_private, session, current_day)
        await event.message.edit_text(**content.as_kwargs(), reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("plus-karma_"), flags={"check_driver": True, "check_callback": True})
async def plus_karma_callback(callback: CallbackQuery, session: AsyncSession, driver: Driver, current_day, is_private):
    if driver.attributes.setdefault("plus", -1) < 0:
        await callback.answer("‚ùé –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∫–∞—Ä–º—ã.\n\n–ú–æ–∂–µ—Ç –∑–∞–≤—Ç—Ä–∞ –ø–æ–≤–µ–∑–µ—Ç.", show_alert=True)
    elif driver.attributes.setdefault("plus", -1) < 10:
        driver.attributes["plus"] = -1
        await callback.answer("‚ùé –í–∞–º —Ç–æ—á–Ω–æ –ø–æ–≤–µ–∑–µ—Ç –≤ —á–µ–º-—Ç–æ –¥—Ä—É–≥–æ–º!\n\n–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!", show_alert=True)
    else:
        driver.attributes["plus"] = -1
        driver.attributes["karma"] = driver.attributes.setdefault("karma", 0) + 1
        await callback.answer("üíü –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–ª—é—Å–∏–∫ –≤ –∫–∞—Ä–º—É.\n\n–ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ.", show_alert=True)

    content, builder = await get_status_message(driver, is_private, session, current_day)
    await callback.message.edit_text(**content.as_kwargs(), reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("leave-queue_"), flags={"check_driver": True, "check_callback": True})
async def leave_queue(callback: CallbackQuery, session: AsyncSession, driver: Driver, current_day, is_private):
    queue_service = QueueService(session)
    queue_index = await queue_service.get_driver_queue_index(driver)
    if queue_index is None:
        await callback.answer("–í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏", show_alert=True)
    else:
        await queue_service.leave_queue(driver)
        await  callback.answer(f"–í—ã –±—ã–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ {queue_index} –º–µ—Å—Ç–µ\n–¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏", show_alert=True)

    content, builder = await get_status_message(driver, is_private, session, current_day)
    await callback.message.edit_text(**content.as_kwargs(), reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("join-queue_"), flags={"check_driver": True, "check_callback": True})
async def join_queue(callback: CallbackQuery, session: AsyncSession, driver: Driver, current_day, is_private):
    queue_service = QueueService(session)
    queue_index = await queue_service.get_driver_queue_index(driver)
    if queue_index is not None:
        await callback.answer(f"–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ {queue_index} –º–µ—Å—Ç–µ", show_alert=True)
    else:
        await queue_service.join_queue(driver)
        queue_index = await queue_service.get_driver_queue_index(driver)
        await callback.answer(f"–í—ã –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ {queue_index} –º–µ—Å—Ç–æ", show_alert=True)
    content, builder = await get_status_message(driver, is_private, session, current_day)
    await callback.message.edit_text(**content.as_kwargs(), reply_markup=builder.as_markup())


async def ttt(message: Message, session: AsyncSession, driver: Driver, is_private):
    # TODO –º–µ–Ω—é –¥–ª—è –∑–∞–Ω—è—Ç–∏—è –º–µ—Å—Ç–∞
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∫–æ–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —á–∏—Å–ª—è—Ç—Å—è –∑–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–º
    my_spots = driver.my_spots()

    # –¢–∞–∫–∂–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –∑–∞–Ω—è—Ç—ã—Ö –º–µ—Å—Ç —ç—Ç–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º

    # –¢–∞–∫–∂–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–∞—Ä–∫–æ–≤–æ–∫

    # –ò –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤–ø–µ—Ä–µ–¥–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ (–µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏, —Ç–æ –¥–ª–∏–Ω–∞ –æ—á–µ—Ä–µ–¥–∏)
    queue_service = QueueService(session)
    all_queue = await queue_service.get_all()
    queue_index = await queue_service.get_driver_queue_index(driver)
    queue_before_me = queue_index - 1 if queue_index is not None else len(all_queue)
