import asyncio
import random
import re
from datetime import timedelta

from aiogram import Router, F
from aiogram.filters import Command, or_f
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram.utils.formatting import Text, TextLink, Bold, as_marked_section, as_key_value
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from models.driver import Driver
from models.parking_spot import SpotStatus
from services.driver_service import DriverService
from services.parking_service import ParkingService
from services.queue_service import QueueService
from services.reservation_service import ReservationService

router = Router()


@router.message(or_f(Command("status"), F.text.regexp(r"(?i)(.*–º–æ–π —Å—Ç–∞—Ç—É—Å)|(.*–ø–æ–∫–∞.* —Å—Ç–∞—Ç—É—Å)")),
                flags={"check_driver": True})
async def show_status(message: Message, session: AsyncSession, driver: Driver, current_day, is_private):
    content, builder = await get_status_message(driver, is_private, session, current_day)
    await message.answer(**content.as_kwargs(), reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("show-status_"), flags={"check_driver": True, "check_callback": True})
async def show_status_callback(callback: CallbackQuery, session, driver, current_day, is_private):
    content, builder = await get_status_message(driver, is_private, session, current_day)
    await callback.message.edit_text(**content.as_kwargs(), reply_markup=builder.as_markup())


async def get_status_message(driver, is_private, session, current_day):
    await session.commit()
    await session.refresh(driver, ["reservations", "parking_spots", "current_spots"])
    is_absent = driver.is_absent(current_day)
    occupied_spots = driver.get_occupied_spots()
    spots, reservations = await ParkingService(session).get_spots_with_reservations(current_day)
    in_queue = await QueueService(session).is_driver_in_queue(driver)

    builder = InlineKeyboardBuilder()
    if is_absent:
        builder.add(InlineKeyboardButton(text="üèéÔ∏è –í–µ—Ä–Ω—É–ª—Å—è —Ä–∞–Ω—å—à–µ...", callback_data="comeback_" + str(driver.chat_id)))
    else:
        if occupied_spots:
            builder.add(InlineKeyboardButton(text="ü´∂ –£–µ—Ö–∞–ª", callback_data="absent_" + str(driver.chat_id)))
        else:
            builder.add(InlineKeyboardButton(text="üöó –ü—Ä–∏–µ–¥—É...", callback_data="book_" + str(driver.chat_id)))
            builder.add(InlineKeyboardButton(text="ü´∂ –ù–µ –ø—Ä–∏–µ–¥—É", callback_data="absent_" + str(driver.chat_id)))
        if in_queue:
            builder.add(
                InlineKeyboardButton(text="‚úã –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data="leave-queue_" + str(driver.chat_id)))
            # –ê –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é, –∫–æ–≥–¥–∞ —Ö–æ—á–µ—à—å –ø—Ä–∏–µ—Ö–∞—Ç—å

    if driver.attributes.get("plus", -1) > -1:
        builder.add(InlineKeyboardButton(text="üé≤ –†–æ–∑—ã–≥—Ä—ã—à –∫–∞—Ä–º—ã!",
                                         callback_data='plus-karma_' + str(driver.chat_id)))
    if is_private:
        builder.add(InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ...", callback_data='edit-schedule'))

    if occupied_spots or is_absent:
        builder.adjust(1)
    else:
        builder.adjust(2, 1)

    content = Text('ü™™ ', TextLink(driver.title, url=f"tg://user?id={driver.chat_id}"), "\n",
                   f"{driver.description}", '\n\n')
    if in_queue:
        content += Bold("–í—ã –≤ –æ—á–µ—Ä–µ–¥–∏") + '\n\n'

    if is_absent:
        content += Bold("–ü—Ä–∏–µ–¥—É –Ω–µ —Ä–∞–Ω—å—à–µ: ") + driver.absent_until.strftime('%d.%m.%Y') + '\n\n'

    if occupied_spots:
        content += Bold("–í—ã —Å—Ç–æ–∏—Ç–µ –Ω–∞: üÖøÔ∏è ") + ", ".join([str(spot.id) for spot in occupied_spots]) + '\n\n'

    content += as_marked_section(
        Bold(f"–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–∞ {current_day.strftime('%d.%m.%Y')}:"),
        *[as_key_value(f"{spot.id}", f"{await get_spot_info(spot, reservations, session)}")
          for spot in driver.my_spots()],
        marker="‚Ä¢ ", ) + '\n\n'

    content += as_key_value("–ö–∞—Ä–º–∞", driver.attributes.get("karma", 0))

    return content, builder


async def get_spot_info(spot, reservations, session):
    # –∏—â–µ–º –≤—Å–µ—Ö –≤ reservations
    res_info = reservations.get(spot.id, [])
    if len(res_info) < 1:
        res = "–ù–µ—Ç –±—Ä–æ–Ω–∏"
    else:
        res = "–ë—Ä–æ–Ω—å —É " + ', '.join(res.driver.title for res in res_info)

    current = ''
    if spot.status == SpotStatus.OCCUPIED:
        await session.refresh(spot, ["current_driver"])
        current = f" / –ó–∞–Ω—è—Ç–æ ({spot.current_driver.title})"
    elif spot.status == SpotStatus.OCCUPIED_WITHOUT_DEMAND:
        await session.refresh(spot, ["current_driver"])
        current = f" / –ó–∞–Ω—è—Ç–æ! ({spot.current_driver.title})"
    elif spot.status == SpotStatus.FREE:
        current = ' / –£–∂–µ —Å–≤–æ–±–æ–¥–Ω–æ'

    return res + current


@router.message(
    F.text.regexp(r"(?i).*((—É–µ—Ö–∞–ª.*–Ω–∞|–º–µ–Ω—è –Ω–µ –±—É–¥–µ—Ç|–±—É–¥—É –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å) (\d+) (–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π))").as_("match"),
    flags={"check_driver": True})
async def absent(message: Message, session: AsyncSession, driver: Driver, current_day, is_private, match: re.Match):
    days = int(match.group(3))  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    await absent_x_days(days, driver, message, session, current_day, is_private)


@router.message(
    or_f(Command("free"), F.text.regexp(r"(?i).*((–Ω–µ –ø—Ä–∏–µ–¥—É —Å–µ–≥–æ–¥–Ω—è)|(—É–∂–µ —É–µ—Ö–∞–ª))")), flags={"check_driver": True})
async def absent(message: Message, session: AsyncSession, driver: Driver, current_day, is_private):
    await absent_x_days(1, driver, message, session, current_day, is_private)


@router.message(F.text.regexp(r"(?i).*(–Ω–µ –ø—Ä–∏–µ–¥—É –∑–∞–≤—Ç—Ä–∞)"), flags={"check_driver": True})
async def absent(message: Message, session: AsyncSession, driver: Driver, current_day, is_private):
    await absent_x_days(2, driver, message, session, current_day, is_private)


@router.callback_query(F.data.startswith("absent_"), flags={"check_driver": True, "check_callback": True})
async def absent_callback(callback: CallbackQuery, session, driver, current_day, is_private):
    await absent_x_days(1, driver, callback, session, current_day, is_private)


async def absent_x_days(days, driver, event, session, current_day, is_private=False):
    # –ø—Ä–∏–±–∞–≤–∏–º –∫ —Å–µ–≥–æ–¥–Ω—è N –¥–Ω–µ–π –∏ –ø–æ–∫–∞–∂–µ–º –¥–∞—Ç—É
    date = current_day + timedelta(days=days)
    driver.absent_until = date
    await ParkingService(session).leave_spot(driver)
    await QueueService(session).leave_queue(driver)
    if isinstance(event, CallbackQuery):
        await event.answer(f"–í—ã —É–µ—Ö–∞–ª–∏ –¥–æ {date.strftime('%d.%m.%Y')}", show_alert=True)
    else:
        await event.reply(f"–í—ã —É–µ—Ö–∞–ª–∏ –¥–æ {date.strftime('%d.%m.%Y')}")
    if isinstance(event, CallbackQuery):
        await show_status_callback(event, session, driver, current_day, is_private)


@router.message(or_f(Command("book"), F.text.regexp(r"(?i).*((–≤–µ—Ä–Ω—É–ª—Å—è —Ä–∞–Ω—å—à–µ)|(–ø—Ä–∏–µ–¥—É —Å–µ–≥–æ–¥–Ω—è))")),
                flags={"check_driver": True})
async def comeback(message: Message, session: AsyncSession, driver: Driver, current_day, is_private):
    await comeback_driver(driver, message, session, current_day, is_private)


@router.callback_query(or_f(F.data.startswith("comeback_"), F.data.startswith("book_")),
                       flags={"check_driver": True, "check_callback": True})
async def comeback_callback(callback: CallbackQuery, session: AsyncSession, driver: Driver, current_day, is_private):
    await comeback_driver(driver, callback, session, current_day, is_private)


async def comeback_driver(driver, event, session, current_day, is_private=False):
    """ –í–æ–¥–∏—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–∏–µ—Ö–∞—Ç—å """
    today = current_day
    if driver.is_absent(today):
        driver.absent_until = today
        reservation_service = ReservationService(session)
        await reservation_service.delete_duplicate_reservations(current_day)

    await session.refresh(driver, ["reservations", "parking_spots", "current_spots"])
    occupied_spots = driver.get_occupied_spots()
    builder = InlineKeyboardBuilder()
    content = Text(f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–µ—Ö–∞—Ç—å {current_day.strftime('%d.%m.%Y')}\n\n")
    sizes = [1]
    if occupied_spots:
        # —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∑–∞–Ω—è—Ç—ã—Ö
        content += f"–í—ã —É–∂–µ –∑–∞–Ω–∏–º–∞–µ—Ç–µ –º–µ—Å—Ç–æ: üÖøÔ∏è {', '.join(str(spot.id) for spot in occupied_spots)}"
    else:
        allow_queue = True
        if driver.my_spots():
            # –ø–æ—Ç–æ–º –≤ –≤–∞—à–∏—Ö –º–µ—Å—Ç–∞—Ö
            spots, reservations = await ParkingService(session).get_spots_with_reservations(current_day)
            content += as_marked_section(
                Bold(f"–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–∞ {current_day.strftime('%d.%m.%Y')}:"),
                *[as_key_value(f"{spot.id}", f"{await get_spot_info(spot, reservations, session)}")
                  for spot in driver.my_spots()],
                marker="‚Ä¢ ", ) + '\n\n'
            for spot in driver.my_spots():
                pref = "‚ö™"
                if spot.status == SpotStatus.OCCUPIED or spot.status == SpotStatus.OCCUPIED_WITHOUT_DEMAND:
                    pref = "üî¥"
                elif spot.status == SpotStatus.FREE:
                    pref = "‚ö™"
                else:
                    res_info = reservations.get(spot.id, [])
                    if len(res_info) < 1:
                        pref = "‚ö™"
                    elif any(res.driver.id == driver.id for res in res_info):
                        pref = "üü¢"
                        allow_queue = False
                    else:
                        pref = "üî¥"
                builder.add(InlineKeyboardButton(text=f"{pref} {spot.id}",
                                                 callback_data=f"occupy-spot_{str(driver.chat_id)}_{spot.id}"))
            sizes = [len(driver.my_spots()), 1]

        # –ø–æ—Ç–æ–º –≤—Å—Ç—É–ø–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        if allow_queue:
            in_queue = await QueueService(session).is_driver_in_queue(driver)
            if in_queue:
                builder.add(
                    InlineKeyboardButton(text="‚úã –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data="leave-queue_" + str(driver.chat_id)))
            else:
                builder.add(
                    InlineKeyboardButton(text="üôã –í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å", callback_data="join-queue_" + str(driver.chat_id)))

    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='show-status_' + str(driver.chat_id)))
    builder.adjust(*sizes)
    if isinstance(event, CallbackQuery):
        await event.message.edit_text(**content.as_kwargs(), reply_markup=builder.as_markup())
    else:
        await event.reply(**content.as_kwargs(), reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("occupy-spot_"), flags={"check_driver": True, "check_callback": True})
async def occupy_spot_callback(callback: CallbackQuery, session, driver, current_day, is_private):
    await ParkingService(session).occupy_spot(driver, int(callback.data.split("_")[2]))
    await QueueService(session).leave_queue(driver)
    await show_status_callback(callback, session, driver, current_day, is_private)


@router.callback_query(F.data.startswith("plus-karma_"), flags={"check_driver": True, "check_callback": True})
async def plus_karma_callback(callback: CallbackQuery, session: AsyncSession, driver: Driver, current_day, is_private):
    if driver.attributes.get("plus", -1) < 0:
        await callback.answer("‚ùé –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∫–∞—Ä–º—ã.\n\n–ú–æ–∂–µ—Ç –∑–∞–≤—Ç—Ä–∞ –ø–æ–≤–µ–∑–µ—Ç.", show_alert=True)
    else:
        driver.attributes["plus"] = -1
        if not is_private:
            await callback.bot.send_message(chat_id=driver.chat_id, text="–†–æ–∑—ã–≥—Ä—ã—à –∫–∞—Ä–º—ã! /status")
        data = await callback.bot.send_dice(chat_id=driver.chat_id, emoji=random.choice(['üé≤', 'üéØ', 'üèÄ', '‚öΩ', 'üé≥']))
        await session.commit()
        await show_status_callback(callback, session, driver, current_day, is_private)
        await asyncio.sleep(5 if is_private else 13)
        driver.attributes["karma"] = driver.attributes.get("karma", 0) + data.dice.value
        await callback.answer(f"üíü –í—ã –ø–æ–ª—É—á–∏–ª–∏ +{data.dice.value} –≤ –∫–∞—Ä–º—É.\n\n–ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ.",
                              show_alert=True)
    await show_status_callback(callback, session, driver, current_day, is_private)


@router.message(F.text.regexp(r"(?i)(.*—Ç–æ–ø –∫–∞—Ä–º–∞)"), flags={"check_driver": True})
async def top_karma(message: Message, session: AsyncSession, driver: Driver, current_day, is_private):
    drivers = await DriverService(session).get_top_karma_drivers(10)
    content = Text(Bold(f"üèÜ –¢–æ–ø {len(drivers)} –∫–∞—Ä–º—ã –≤–æ–¥–∏—Ç–µ–ª–µ–π:\n"))
    for driver in drivers:
        content += '\n'
        content += Bold(f"{driver.attributes.get('karma', 0)}")
        content += f"\t..\t{driver.title}"
    await message.reply(**content.as_kwargs())


@router.callback_query(F.data.startswith("leave-queue_"), flags={"check_driver": True, "check_callback": True})
async def leave_queue(callback: CallbackQuery, session: AsyncSession, driver: Driver, current_day, is_private):
    queue_service = QueueService(session)
    in_queue = await queue_service.is_driver_in_queue(driver)
    if not in_queue:
        await callback.answer("–í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏", show_alert=True)
    else:
        await queue_service.leave_queue(driver)
        await callback.answer(f"–¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏", show_alert=True)
    await show_status_callback(callback, session, driver, current_day, is_private)


@router.callback_query(F.data.startswith("join-queue_"), flags={"check_driver": True, "check_callback": True})
async def join_queue(callback: CallbackQuery, session: AsyncSession, driver: Driver, current_day, is_private):
    queue_service = QueueService(session)
    in_queue = await queue_service.is_driver_in_queue(driver)
    if in_queue:
        await callback.answer(f"–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏", show_alert=True)
    else:
        # TODO –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –º–µ—Å—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ, —Ç–æ –Ω–∏–∫–∞–∫–æ–π –æ—á–µ—Ä–µ–¥–∏? –∏–ª–∏ –º–æ–∂–Ω–æ –≤—Å—Ç–∞—Ç—å?
        await queue_service.join_queue(driver)
        await callback.answer(f"–í—ã –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å", show_alert=True)
    await show_status_callback(callback, session, driver, current_day, is_private)
