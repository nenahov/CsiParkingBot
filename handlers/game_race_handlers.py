import json
import os
import random
from io import BytesIO

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, FSInputFile, BufferedInputFile
from aiogram.utils.formatting import Bold, Spoiler, as_key_value, Code, Text, HashTag
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from handlers.driver_callback import add_button, MyCallback
from models.driver import Driver
from models.user_audit import UserActionType
from services.audit_service import AuditService
from services.driver_service import DriverService
from services.notification_sender import send_alarm
from services.param_service import ParamService
from utils.cars_generator import draw_start_race_track, create_race_gif
from utils.game_race_utils import GameState, generate_game_with_weather_forecast

PLACE_PERCENT = {1: 35, 2: 25, 3: 17, 4: 12, 5: 8}

MIN_PLAYERS = 7
MAX_PLAYERS = 12
FEE = 5

router = Router()


async def get_state(chat_id: int, session) -> GameState | None:
    race_state = await ParamService(session).get_parameter('race_state', '{}')
    states = json.loads(race_state)
    state_dict = states.get(str(chat_id), None)
    if state_dict is None:
        return None
    state = GameState.from_dict(state_dict)
    return state


async def save_state(chat_id: int, game_state: GameState, session):
    race_state = await ParamService(session).get_parameter('race_state', '{}')
    states = json.loads(race_state)
    states[str(chat_id)] = game_state.to_dict()
    await ParamService(session).set_parameter('race_state', json.dumps(states, ensure_ascii=False))


async def remove_state(chat_id: int, session):
    race_state = await ParamService(session).get_parameter('race_state', '{}')
    states = json.loads(race_state)
    states[str(chat_id)] = None
    await ParamService(session).set_parameter('race_state', json.dumps(states))


@router.message(
    F.text.regexp(r"(?i).*–¥–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –≥–æ–Ω–∫–∞"),
    flags={"lock_operation": "race", "long_operation": "upload_photo", "check_admin": True, "check_driver": True})
async def game_race(message: Message, session: AsyncSession, driver: Driver, current_day, is_private):
    if is_private:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return

    game_state = await get_state(message.chat.id, session)
    if game_state is None:
        game_state = generate_game_with_weather_forecast()
        await save_state(message.chat.id, game_state, session)
        await AuditService(session).log_action(driver.id, UserActionType.GAME, current_day, 0,
                                               f'{driver.title} –ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É "–ì–æ–Ω–∫–∏"')
    content, builder, players = await get_game_message(game_state, session)
    content += HashTag("#–≥–æ–Ω–∫–∏")
    await message.answer_photo(show_caption_above_media=False,
                               photo=await get_media(players),
                               reply_markup=builder.as_markup(),
                               **content.as_kwargs(text_key="caption", entities_key="caption_entities"))


@router.callback_query(MyCallback.filter(F.action == "join_race"),
                       flags={"lock_operation": "race",
                              "long_operation": "upload_photo",
                              "check_driver": True})
async def join_race_callback(callback: CallbackQuery, callback_data: MyCallback, session, driver: Driver, current_day):
    game_state = await get_state(callback.message.chat.id, session)
    if game_state is None:
        await send_alarm(callback, "‚ö†Ô∏è –ù–∞—á–Ω–∏—Ç–µ –ù–æ–≤—É—é –∏–≥—Ä—É!")
        return

    if len(game_state.player_ids) >= MAX_PLAYERS:
        await send_alarm(callback, "–°–æ—Å—Ç–∞–≤ –∑–∞–µ–∑–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–µ–∑–¥!")
        return

    if game_state.is_in_game(driver):
        await send_alarm(callback, "‚ö†Ô∏è –í—ã —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–µ–∑–¥–∞!")
        return

    karma = driver.get_karma()
    if karma < FEE:
        await send_alarm(callback, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä–º—ã!")
        return

    driver.attributes["karma"] = karma - FEE
    await AuditService(session).log_action(driver.id, UserActionType.GAME_KARMA, current_day, -FEE,
                                           f"{driver.title} –ë—É–¥–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∑–∞–µ–∑–¥–µ –∏ –∑–∞–ø–ª–∞—Ç–∏–ª -{FEE} –∫–∞—Ä–º—ã")

    game_state.add_player(driver)
    await save_state(callback.message.chat.id, game_state, session)

    content, builder, players = await get_game_message(game_state, session)
    content += HashTag("#–≥–æ–Ω–∫–∏")
    await callback.message.answer_photo(show_caption_above_media=False,
                                        photo=await get_media(players),
                                        reply_markup=builder.as_markup(),
                                        **content.as_kwargs(text_key="caption", entities_key="caption_entities"))
    try:
        await callback.message.delete()
    except:
        pass


@router.callback_query(MyCallback.filter(F.action == "start_race"),
                       flags={"lock_operation": "race",
                              "long_operation": "upload_video",
                              "check_admin": True,
                              "check_driver": True})
async def start_race_callback(callback: CallbackQuery, callback_data: MyCallback, session, driver: Driver, current_day):
    chat_id = callback.message.chat.id
    game_state = await get_state(chat_id, session)
    if game_state is None:
        await send_alarm(callback, "‚ö†Ô∏è –ù–∞—á–Ω–∏—Ç–µ –ù–æ–≤—É—é –∏–≥—Ä—É!")
        return

    if len(game_state.player_ids) < MIN_PLAYERS:
        await send_alarm(callback, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–Ω—â–∏–∫–æ–≤ –≤ –∑–∞–µ–∑–¥–µ!")
        return

    await AuditService(session).log_action(driver.id, UserActionType.GAME, current_day, 0,
                                           f'{driver.title} –ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–µ–∑–¥ –≤ –∏–≥—Ä–µ "–ì–æ–Ω–∫–∏"')

    content, _, players = await get_game_message(game_state, session)
    winners = create_race_gif(game_state, players, chat_id=chat_id,
                              output_path=f"race_{chat_id}.gif", frame_count=400, duration=2)
    medals = {1: "ü•á", 2: "ü•à", 3: "ü•â", 4: "4Ô∏è‚É£", 5: "5Ô∏è‚É£", 6: "6Ô∏è‚É£", 7: "7Ô∏è‚É£", 8: "8Ô∏è‚É£", 9: "9Ô∏è‚É£", 10: "üîü"}
    count = len(game_state.player_ids)
    total = FEE * count
    for idx, player_idx in enumerate(winners):
        place = idx + 1
        player = players[player_idx]
        content += f"{medals.get(place, place)} .. "
        content += Spoiler(f"{player.title:‚Ä¶<20}")
        prize = total * PLACE_PERCENT.get(place, 0) // 100
        if place == len(winners) and prize < FEE:
            prize = FEE
        if prize != 0:
            player.attributes["karma"] = player.get_karma() + prize
            await AuditService(session).log_action(player.id, UserActionType.GAME_KARMA, current_day, prize,
                                                   f"{player.title} –ó–∞ {place} –º–µ—Å—Ç–æ –≤ –∑–∞–µ–∑–¥–µ –ø–æ–ª—É—á–∏–ª {prize:+d} –∫–∞—Ä–º—ã")

        content += '\n'
    content += '\n'
    content += HashTag("#–≥–æ–Ω–∫–∏")
    await callback.message.answer_animation(animation=FSInputFile(f"race_{chat_id}.mp4"), supports_streaming=True)
    await callback.message.answer(**content.as_kwargs())
    await remove_state(chat_id, session)


@router.callback_query(MyCallback.filter(F.action == "check_wheels"),
                       flags={"check_driver": True})
async def join_race_callback(callback: CallbackQuery, callback_data: MyCallback, session, driver: Driver, current_day):
    wheels = driver.attributes.get("wheels", 0)
    text = "–¥–æ–∂–¥–µ–≤—ã–µ —à–∏–Ω—ã (–¥–∞—é—Ç + –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–æ –≤—Ä–µ–º—è –¥–æ–∂–¥—è)" if wheels == 1 else "—Å–ª–∏–∫–∏ (–ª—É—á—à–∏–µ –Ω–∞ —Å—É—Ö–æ–π —Ç—Ä–∞—Å—Å–µ)" if wheels == 2 else "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —à–∏–Ω—ã"
    await send_alarm(callback, f"üõû –°–µ–π—á–∞—Å –Ω–∞ –º–∞—à–∏–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã {text}")


@router.callback_query(MyCallback.filter(F.action == "set_wheels"),
                       flags={"check_driver": True})
async def set_wheels_callback(callback: CallbackQuery, callback_data: MyCallback, session, driver: Driver, current_day):
    wheels = callback_data.spot_id
    driver.attributes["wheels"] = wheels
    text = "–î–æ–∂–¥–µ–≤—ã–µ —à–∏–Ω—ã (–¥–∞—é—Ç + –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–æ –≤—Ä–µ–º—è –¥–æ–∂–¥—è)" if wheels == 1 else "–°–ª–∏–∫–∏ (–ª—É—á—à–∏–µ –Ω–∞ —Å—É—Ö–æ–π —Ç—Ä–∞—Å—Å–µ)" if wheels == 2 else "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —à–∏–Ω—ã"
    await send_alarm(callback, f"üõû {text} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


async def get_media(players):
    if len(players) < MIN_PLAYERS:
        file = get_random_filename("./pics/racing")
        if file:
            return FSInputFile(os.path.join("./pics/racing", file))
        return FSInputFile("./pics/racing.jpg")
    track = draw_start_race_track(players, bg_color=(120, 120, 120), track_length=len(players) * 120)
    img_buffer = BytesIO()
    track.save(img_buffer, format="PNG")
    img_buffer.seek(0)
    return BufferedInputFile(img_buffer.getvalue(), filename="race.png")


def get_random_filename(directory_path):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ directory_path.
    –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        entries = os.listdir(directory_path)
    except FileNotFoundError:
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{directory_path}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return None
    except PermissionError:
        # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        print(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{directory_path}'.")
        return None

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã, –∞ –Ω–µ –ø–æ–¥–ø–∞–ø–∫–∏)
    files = [f for f in entries if os.path.isfile(os.path.join(directory_path, f))]

    if not files:
        print("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –≤ –Ω–µ–π –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.")
        return None

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–π–ª
    random_file = random.choice(files)
    return random_file


async def get_game_message(game_state: GameState, session):
    content = Bold(f"üèÅ –ò–≥—Ä–∞ ¬´–ì–æ–Ω–∫–∏¬ª üèéÔ∏èüöôüöóüöåüõªüöú\n\n")
    content += "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å ¬´—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∑–∞–µ–∑–¥–µ¬ª –∏ –≤—ã–±—Ä–∞—Ç—å —à–∏–Ω—ã –ø–æ –ø–æ–≥–æ–¥–µ.\n"
    content += "–ì–æ–Ω–∫–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
    count = len(game_state.player_ids)
    total = FEE * count
    content += as_key_value("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", count)
    content += '\n'
    if count >= MIN_PLAYERS:
        content += Text("\n–ó–∞ ü•á –º–µ—Å—Ç–æ –≤—ã–∏–≥—Ä—ã—à: ") + Code(f"{(total * PLACE_PERCENT.get(1, 0) // 100):+4d} üíü")
        content += Text("\n–ó–∞ ü•à –º–µ—Å—Ç–æ –≤—ã–∏–≥—Ä—ã—à: ") + Code(f"{(total * PLACE_PERCENT.get(2, 0) // 100):+4d} üíü")
        content += Text("\n–ó–∞ ü•â –º–µ—Å—Ç–æ –≤—ã–∏–≥—Ä—ã—à: ") + Code(f"{(total * PLACE_PERCENT.get(3, 0) // 100):+4d} üíü")
        content += Text("\n–ó–∞ 4Ô∏è‚É£ –º–µ—Å—Ç–æ –≤—ã–∏–≥—Ä—ã—à: ") + Code(f"{(total * PLACE_PERCENT.get(4, 0) // 100):+4d} üíü")
        content += Text("\n–ó–∞ 5Ô∏è‚É£ –º–µ—Å—Ç–æ –≤—ã–∏–≥—Ä—ã—à: ") + Code(f"{(total * PLACE_PERCENT.get(5, 0) // 100):+4d} üíü")
        content += Text("\n–ü—Ä–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ:  ") + Code(f"{FEE} üíü")
        content += '\n\n'
    players = []
    for idx, player_id in enumerate(game_state.player_ids):
        player = await DriverService(session).get_by_id(player_id)
        players.append(player)
        if count < MIN_PLAYERS:
            content += f"{idx + 1}. {player.title}\n"
    if count < MIN_PLAYERS:
        content += '\n'
    content += Bold("–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–µ–∑–¥:\n")
    weather_forecast = game_state.weather

    part1 = weather_forecast.get('1')
    part2 = weather_forecast.get('2')
    content += f"–£—á–∞—Å—Ç–æ–∫ 1:    {part1[2] * 10}% ‚òÄÔ∏è,  {part1[1] * 10}% üåßÔ∏è\n"
    content += f"–£—á–∞—Å—Ç–æ–∫ 2:    {part2[2] * 10}% ‚òÄÔ∏è,  {part2[1] * 10}% üåßÔ∏è\n"
    content += f"–£—á–∞—Å—Ç–æ–∫ 3: –ü–æ–≥–æ–¥–∞ –±—É–¥–µ—Ç —Ç–∞–∫–æ–π, –ø–æ–¥ –∫–æ—Ç–æ—Ä—É—é –≤—ã–±—Ä–∞–Ω–æ –º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ —à–∏–Ω\n"
    content += '\n'
    builder = await get_race_keyboard(game_state)
    return content, builder, players


async def get_race_keyboard(game_state: GameState):
    builder = InlineKeyboardBuilder()
    keyboard_sizes = []
    players_count = len(game_state.player_ids)
    if players_count < MAX_PLAYERS:
        add_button(f"–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å (–ø–ª–∞—Ç–∞ üíü {FEE} –∫–∞—Ä–º—ã)", "join_race", 0, builder)
        keyboard_sizes.append(1)

    add_button(f"‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–µ—Å–∞ üõûüõûüõûüõû", "check_wheels", 0, builder)
    keyboard_sizes.append(1)
    add_button(f"üõû –¥–ª—è ‚òÄÔ∏è", "set_wheels", 0, builder, spot_id=2)
    add_button(f"üõû –¥–ª—è ‚òÅÔ∏è", "set_wheels", 0, builder, spot_id=0)
    add_button(f"üõû –¥–ª—è üåßÔ∏è", "set_wheels", 0, builder, spot_id=1)
    keyboard_sizes.append(3)
    # if players_count >= 30:
    #     add_button("üòá –ü–æ–º–æ—á—å —Å–æ–ø–µ—Ä–Ω–∏–∫—É", "race_help_opponent", 0, builder)
    #     for i in range(1, players_count + 1):
    #         add_button(f"üòá {i}", "race_help_opponent", 0, builder, spot_id=i)
    #     add_button("üòà –°–¥–µ–ª–∞—Ç—å –ø–∞–∫–æ—Å—Ç—å", "race_joke_opponent", 0, builder)
    #     for i in range(1, players_count + 1):
    #         add_button(f"üòà {i}", "race_joke_opponent", 0, builder, spot_id=i)
    #     if players_count > 6:
    #         keyboard_sizes.append(1)
    #         keyboard_sizes.append(int(players_count / 2))
    #         keyboard_sizes.append(players_count - int(players_count / 2))
    #         keyboard_sizes.append(1)
    #         keyboard_sizes.append(int(players_count / 2))
    #         keyboard_sizes.append(players_count - int(players_count / 2))
    #     else:
    #         keyboard_sizes.append(1)
    #         keyboard_sizes.append(players_count)
    #         keyboard_sizes.append(1)
    #         keyboard_sizes.append(players_count)

    if players_count >= MIN_PLAYERS:
        add_button("üèÅ –ù–∞—á–∞—Ç—å –≥–æ–Ω–∫—É!", "start_race", 0, builder)
        keyboard_sizes.append(1)
    builder.adjust(*keyboard_sizes)
    return builder
