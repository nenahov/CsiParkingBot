from typing import Any

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.formatting import as_list, as_marked_section, Bold, as_key_value, HashTag, Code

from handlers.handlers_functions import HandlerFunctions
from handlers.map_handlers import map_command
from handlers.user_handler import show_status
from services.driver_service import DriverService

router = Router()


async def k1(message, k):
    print(k)
    await message.answer(f'k1({k})')


text_handlers = HandlerFunctions()
# text_handlers.add_handler(r"(–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é|–Ω–µ –ø—Ä–∏–µ–¥—É|–±—É–¥—É –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)\s+(\d+)\s+(–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π)",
#                           lambda message, match, session, driver: k1(message, match))
text_handlers.add_handler(r"(/map)|(–ø–æ–∫–∞.* –∫–∞—Ä—Ç(–∞|—É))|(–∫–∞—Ä—Ç(–∞|—É) –ø–∞—Ä–∫–æ–≤–∫–∏)",
                          lambda message, match, session, driver: map_command(message, session, driver))
text_handlers.add_handler(r"(/status)|(–º–æ–π —Å—Ç–∞—Ç—É—Å)|(–ø–æ–∫–∞.* —Å—Ç–∞—Ç—É—Å)",
                          lambda message, match, session, driver: show_status(message, session, driver))
text_handlers.add_handler(r"(/help)|(/commands)|(–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã)|(–ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É)",
                          lambda message, match, session, driver: help_command(message))


@router.message(F.new_chat_members)
async def somebody_added(message: Message, session):
    driver_service = DriverService(session)
    for user in message.new_chat_members:
        # –ø—Ä–æ–ø–µ—Ä—Ç–∏ full_name –±–µ—Ä—ë—Ç —Å—Ä–∞–∑—É –∏–º—è –ò —Ñ–∞–º–∏–ª–∏—é
        # (–Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –≤—ã—à–µ —É —é–∑–µ—Ä–æ–≤ –Ω–µ—Ç —Ñ–∞–º–∏–ª–∏–∏)
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}")
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        driver = await driver_service.get_by_chat_id(user.id)

        title = f'{user.full_name}'
        desc = f'{user.full_name}'

        if not driver:
            await driver_service.register_driver(user.id, user.username, title, desc)

        if not driver or not driver.enabled:
            await message.answer(
                f"{user.first_name}, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.")


@router.message(Command("start"))
async def start_command(message: Message, session):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}, —è –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç!")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    driver_service = DriverService(session)
    driver = await driver_service.get_by_chat_id(message.from_user.id)

    title = f'{message.from_user.full_name}'
    desc = f'{message.from_user.full_name}'

    if not driver:
        await driver_service.register_driver(message.from_user.id, message.from_user.username, title, desc)

    if not driver or not driver.enabled:
        await message.answer(
            f"{message.from_user.first_name}, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.")

    if message.chat.type == 'group':
        members_count = await message.bot.get_chat_member_count(message.chat.id)
        print(f"–í –≥—Ä—É–ø–ø–µ {members_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        # members_list = [member.user.full_name for member in members]
        # await message.answer("\n".join(members_list))
        # await message.answer(f"–í –≥—Ä—É–ø–ø–µ {members_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")


@router.message(Command("help"))
async def help_command(message: Message):
    content = as_list(
        f"–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç!",
        f"–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥ –≤ —á–∞—Ç:",
        as_marked_section(
            Bold("–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"),
            as_key_value(Code("‚ÑπÔ∏è –º–æ–π —Å—Ç–∞—Ç—É—Å"), "–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"),
            as_key_value(Code("üó∫Ô∏è –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –ø–∞—Ä–∫–æ–≤–∫–∏"), "–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É –ø–∞—Ä–∫–æ–≤–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç"),
            marker="‚Ä¢ ", ),
        as_marked_section(
            Bold("–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞:"),
            as_key_value(Code("ü´∂ –±—É–¥—É –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å N –¥–Ω–µ–π"), "–æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Å–≤–æ–µ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ N –¥–Ω–µ–π"),
            as_key_value(Code("ü´∂ –Ω–µ –ø—Ä–∏–µ–¥—É —Å–µ–≥–æ–¥–Ω—è"), "—Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ '–±—É–¥—É –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å 1 –¥–µ–Ω—å'"),
            as_key_value(Code("üëã –≤–µ—Ä–Ω—É–ª—Å—è —Ä–∞–Ω—å—à–µ"), "–≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞"),
            as_key_value(Code("üöó –ø—Ä–∏–µ–¥—É —Å–µ–≥–æ–¥–Ω—è"), "–∑–∞–Ω–∏–º–∞–µ—Ç–µ —Ä–∞–Ω–µ–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –∏–ª–∏ –≤—Å—Ç–∞–µ—Ç–µ –≤ –æ—á–µ—Ä–µ–¥—å"),
            marker="‚Ä¢ ", ),
        as_marked_section(
            Bold("–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é:"),
            as_key_value(Code("‚ÑπÔ∏è –ø–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å"), "–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∏—á–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –º–µ—Å—Ç –∏ –æ—á–µ—Ä–µ–¥–∏"),
            as_key_value(Code("üôã —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ") + ', ' + Code("–≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å"),
                         "–¥–æ–±–∞–≤–ª—è–µ—Ç–µ —Å–µ–±—è –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –≤ –Ω–µ–π"),
            marker="‚Ä¢ ", ),
        HashTag("#commands"),
        sep="\n\n",
    )
    await message.answer(**content.as_kwargs())


@router.message()
async def message_handler(message: Message, session) -> Any:
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    driver_service = DriverService(session)
    driver = await driver_service.get_by_chat_id(message.from_user.id)

    if not driver or not driver.enabled:
        return

    await text_handlers.call_handler_func_by_text(message, session, driver)
