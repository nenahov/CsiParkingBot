import logging
import os
import random
from datetime import datetime, timedelta

import requests
from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.formatting import Bold, Italic

from services.driver_service import DriverService

router = Router()
logger = logging.getLogger(__name__)


@router.message(F.new_chat_members)
async def somebody_added(message: Message, session):
    driver_service = DriverService(session)
    for user in message.new_chat_members:
        # –ø—Ä–æ–ø–µ—Ä—Ç–∏ full_name –±–µ—Ä—ë—Ç —Å—Ä–∞–∑—É –∏–º—è –ò —Ñ–∞–º–∏–ª–∏—é
        # (–Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –≤—ã—à–µ —É —é–∑–µ—Ä–æ–≤ –Ω–µ—Ç —Ñ–∞–º–∏–ª–∏–∏)
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}")
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        driver = await driver_service.get_by_chat_id(user.id)

        if not driver:
            title = f'{user.full_name}'
            desc = f'{user.full_name}'
            driver = await driver_service.register_driver(user.id, user.username, title, desc)

        if not driver.enabled:
            await message.answer(f"{user.first_name}, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.")


@router.message(Command("start"))
async def start_command(message: Message, session):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}, —è –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç!")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    driver_service = DriverService(session)
    driver = await driver_service.get_by_chat_id(message.from_user.id)

    title = f'{message.from_user.full_name}'
    desc = f'{message.from_user.full_name}'

    if not driver:
        driver = await driver_service.register_driver(message.from_user.id, message.from_user.username, title, desc)

    if not driver or not driver.enabled:
        await message.answer(
            f"{message.from_user.first_name}, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.")

    driver.attributes["test"] = random.randint(0, 100)

    if message.chat.type == 'group':
        members_count = await message.bot.get_chat_member_count(message.chat.id)
        print(f"–í –≥—Ä—É–ø–ø–µ {members_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        chat_info = await message.bot.get_chat(message.chat.id)
        print(f"{chat_info}")
        # members_list = [member.user.full_name for member in members]
        # await message.answer("\n".join(members_list))
        # await message.answer(f"–í –≥—Ä—É–ø–ø–µ {members_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")


@router.message(F.text.regexp(r"(?i)(.*–Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É)|(.*—Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º)"))
async def dev_command(message: Message):
    await message.reply("–ü–µ—Ä–µ–¥–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É")
    await message.bot.send_message(chat_id=203121382,
                                   text=F"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç [{message.from_user.full_name}](tg://user?id={message.from_user.id}):\n{message.md_text}",
                                   parse_mode=ParseMode.MARKDOWN_V2)


@router.message(F.text.regexp(r"(?i)(.*–ø—Ä–æ–≥–Ω–æ–∑.*–ø–æ–≥–æ–¥.*–∑–∞–≤—Ç—Ä–∞)"))
async def show_weather(message: Message):
    day = datetime.now() + timedelta(days=1)
    content = await get_weather_content(day)
    await message.reply(**content.as_kwargs())


@router.message(F.text.regexp(r"(?i)(.*–ø—Ä–æ–≥–Ω–æ–∑.*–ø–æ–≥–æ–¥)"))
async def show_weather(message: Message):
    day = datetime.now()
    content = await get_weather_content(day)
    await message.reply(**content.as_kwargs())


async def get_weather_content(day):
    API_KEY = os.getenv("OPENWEATHERMAP_API_KEY")
    CITY = "Saint Petersburg,RU"
    BASE_URL = "http://api.openweathermap.org/data/2.5/forecast"
    params = {
        "q": CITY,
        "appid": API_KEY,
        "units": "metric",
        "lang": "ru"
    }
    response = requests.get(BASE_URL, params=params)
    data = response.json()
    logger.debug(f"{data}")
    day_request = day.strftime("%Y-%m-%d")
    weather_map = {
        "01": "‚òÄ",
        "02": "‚õÖÔ∏è",
        "03": "üå•Ô∏è",
        "04": "üå•Ô∏è",
        "09": "üåà",
        "10": "üåßÔ∏è",
        "11": "‚õàÔ∏è",
        "13": "üå®Ô∏è",
        "50": "üå´Ô∏è"
    }
    is_ok = False
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    content = Bold(f"–ü–æ–≥–æ–¥–∞ –Ω–∞ {day.strftime('%A %d.%m.%Y')}:")
    for forecast in data["list"]:
        date = forecast["dt_txt"].split()[0]
        if date == day_request:
            is_ok = True
            time = forecast["dt_txt"].split()[1][:5]
            temp = int(forecast["main"]["temp"])
            desc = forecast["weather"][0]["description"]
            icon = forecast["weather"][0]["icon"][:2]
            content += f"\n{time}: \t{temp}¬∞C, \t{weather_map.get(icon, "")} {desc}"
    if not is_ok:
        content += Italic("\n–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ü§∑")
    return content
