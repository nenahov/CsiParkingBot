from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, BufferedInputFile, InputMediaPhoto
from aiogram.utils.formatting import Text, Bold, as_key_value, as_list
from aiogram.utils.keyboard import InlineKeyboardBuilder

from handlers.driver_callback import add_button, MyCallback
from models.driver import Driver
from models.user_audit import UserActionType
from services.audit_service import AuditService
from services.notification_sender import send_reply, EventType, NotificationSender, send_alarm
from utils.cars_generator import generate_carousel_image, cars_count

router = Router()


@router.callback_query(MyCallback.filter(F.action == "settings"),
                       flags={"check_driver": True, "check_callback": True})
async def show_settings_menu(event, session, driver: Driver):
    content = Text(Bold("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"))
    content += '\n\n'
    content += as_list(as_key_value("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏;"),
                       as_key_value("üõéÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", "–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π;"),
                       as_key_value("üèéÔ∏è –í—ã–±—Ä–∞—Ç—å –∞–≤–∞—Ç–∞—Ä",
                                    "–í—ã–±–æ—Ä –º–æ–¥–µ–ª—å–∫–∏ –í–∞—à–µ–π –º–∞—à–∏–Ω—ã, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç–µ, –∫–æ–≥–¥–∞ –í—ã –ø—Ä–∏–µ—Ö–∞–ª–∏."))
    builder = InlineKeyboardBuilder()
    add_button("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ...", "edit-schedule", driver.chat_id, builder)
    add_button("üõéÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...", "edit-alarms", driver.chat_id, builder)
    add_button("üèéÔ∏è –í—ã–±—Ä–∞—Ç—å –∞–≤–∞—Ç–∞—Ä...", "edit-avatar", driver.chat_id, builder)
    add_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "show-status", driver.chat_id, builder)
    builder.adjust(1)
    await send_reply(event, content, builder)


@router.callback_query(MyCallback.filter(F.action == "edit-alarms"),
                       flags={"check_driver": True, "check_callback": True})
async def edit_alarms(event, driver: Driver):
    content = Text(Bold("üõéÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:"))
    # content += '\n\n'
    # content += Bold("‚úÖ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç,\n‚ùå - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç")
    content += '\n\n'
    disabled_events = driver.attributes.get("disabled_events", [])
    builder = InlineKeyboardBuilder()
    for event_type in EventType:
        is_on = event_type.name not in disabled_events
        content += ('‚úÖ ' if is_on else '‚ùå ')
        content += as_key_value(event_type.value["button_text"], event_type.value["description"])
        content += '\n'
        add_button(('‚úÖ ' if is_on else '‚ùå ') + event_type.value["button_text"], "set-alarms", driver.chat_id, builder,
                   event_type=event_type.name, bool_value=is_on)
        add_button('–¢–µ—Å—Ç', "test-alarms", driver.chat_id, builder,
                   event_type=event_type.name)

    add_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "show-status", driver.chat_id, builder)
    builder.adjust(2)
    await send_reply(event, content, builder)


@router.callback_query(MyCallback.filter(F.action == "set-alarms"),
                       flags={"check_driver": True, "check_callback": True})
async def set_alarms(event, callback_data: MyCallback, session, driver: Driver, current_day):
    disabled_events = driver.attributes.get("disabled_events", [])
    if callback_data.bool_value:
        if callback_data.event_type not in disabled_events:
            disabled_events.append(callback_data.event_type)
    elif callback_data.event_type in disabled_events:
        disabled_events.remove(callback_data.event_type)
    driver.attributes["disabled_events"] = disabled_events
    await session.commit()
    await edit_alarms(event, driver)


@router.callback_query(MyCallback.filter(F.action == "test-alarms"),
                       flags={"check_driver": True, "check_callback": True})
async def test_alarms(event: CallbackQuery, callback_data: MyCallback, session, driver: Driver, current_day):
    test_driver = Driver()
    test_driver.title = "–§–ò–û_–≤–æ–¥–∏—Ç–µ–ª—è"
    test_driver.description = "–§–ò–û_–≤–æ–¥–∏—Ç–µ–ª—è"
    test_driver.attributes = {}
    await NotificationSender(event.bot).send_to_driver(EventType[callback_data.event_type], test_driver, driver,
                                                       add_message="",
                                                       spot_id=0, karma_change=0,
                                                       my_date=current_day.strftime('%a %d.%m.%Y'), txt='–í—ã—Ö–æ–¥–Ω–æ–π\n\n')
    await event.answer()


@router.callback_query(MyCallback.filter(F.action == "edit-avatar"),
                       flags={"check_driver": True, "check_callback": True})
async def edit_avatar(event: CallbackQuery, driver: Driver):
    current_index = driver.attributes.get("car_index", driver.id)
    photo = generate_carousel_image(current_index)
    await event.message.answer_photo(caption="üèéÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∞–≤–∞—Ç–∞—Ä:", show_caption_above_media=True,
                                     photo=BufferedInputFile(photo.getvalue(), filename="carousel.png"),
                                     reply_markup=get_carousel_keyboard(current_index, driver.chat_id))
    await event.answer()


@router.callback_query(MyCallback.filter(F.action == "set-avatar"),
                       flags={"check_driver": True, "check_callback": True})
async def set_avatar(event: CallbackQuery, callback_data: MyCallback, session, driver: Driver, current_day):
    driver.attributes["car_index"] = callback_data.spot_id
    await send_alarm(event, "üèéÔ∏è –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    await AuditService(session).log_action(driver.id, UserActionType.CHOOSE_AVATAR, current_day,
                                           description=f"{driver.description} –≤—ã–±—Ä–∞–ª –∞–≤–∞—Ç–∞—Ä {callback_data.spot_id}")


@router.callback_query(F.data.startswith("carousel:"), flags={"check_driver": True})
async def carousel_callback(event: CallbackQuery, driver: Driver):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è" –∏ "‚û°Ô∏è".
    –ò–∑ callback data –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å,
    –ø–æ—Å–ª–µ —á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """
    try:
        _, index_str, direction = event.data.split(":")
        current_index = int(index_str)
    except ValueError:
        await event.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
        return

    new_index = (current_index + int(direction)) % cars_count

    photo = generate_carousel_image(new_index)
    try:
        await event.message.edit_media(
            media=InputMediaPhoto(caption="üèéÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∞–≤–∞—Ç–∞—Ä:", show_caption_above_media=True,
                                  media=BufferedInputFile(photo.getvalue(), filename="carousel.png")),
            reply_markup=get_carousel_keyboard(new_index, driver.chat_id))
    except Exception as e:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
        await event.message.answer_photo(caption="üèéÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∞–≤–∞—Ç–∞—Ä:", show_caption_above_media=True,
                                         photo=BufferedInputFile(photo.getvalue(), filename="carousel.png"),
                                         reply_markup=get_carousel_keyboard(new_index, driver.chat_id))

    await event.answer()


def get_carousel_keyboard(current_index: int, chat_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "‚¨ÖÔ∏è" –∏ "‚û°Ô∏è".
    Callback data —Ö—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã.
    """
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"carousel:{current_index}:-1"))
    builder.add(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"carousel:{current_index}:1"))
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è‚¨ÖÔ∏è‚¨ÖÔ∏è", callback_data=f"carousel:{current_index}:-3"))
    builder.add(InlineKeyboardButton(text="‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è", callback_data=f"carousel:{current_index}:3"))
    add_button("‚òëÔ∏è –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –∞–≤–∞—Ç–∞—Ä", "set-avatar", chat_id, builder, spot_id=current_index)
    builder.adjust(2, 2, 1)
    return builder.as_markup()
