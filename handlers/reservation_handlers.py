from datetime import timedelta

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.formatting import Text, as_marked_section, Bold, as_key_value, Italic
from aiogram.utils.keyboard import InlineKeyboardBuilder

from models.driver import Driver
from services.reservation_service import ReservationService

router = Router()


@router.callback_query(F.data.startswith("choose-day_"), flags={"check_driver": True})
async def handle_day_selection(callback: CallbackQuery, session, driver: Driver, current_day):
    _, spot_id, day = callback.data.split("_")
    spot_id = int(spot_id)
    day = int(day)

    reservation_service = ReservationService(session)
    reservations = await reservation_service.get_spot_reservations(spot_id, day)

    builder = InlineKeyboardBuilder()
    if any(res.driver_id == driver.id for res in reservations):
        builder.add(InlineKeyboardButton(
            text="‚ùå –û—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ",
            callback_data=f"cancel_{spot_id}_{day}"
        ))
    elif all(res.driver.is_absent(current_day + timedelta(days=1)) for res in reservations):
        builder.add(InlineKeyboardButton(
            text="‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å",
            callback_data=f"reserve_{spot_id}_{day}"
        ))

    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data=f"select-spot_{spot_id}"
    ))

    drivers_info = Bold("–°–≤–æ–±–æ–¥–Ω–æ!") if not reservations else as_marked_section(
        Bold("–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ:"),
        *[as_key_value(f"{res.driver.description}",
                       f"–ø—Ä–∏–µ–¥–µ—Ç {res.driver.absent_until.strftime('%d.%m.%Y') if res.driver.is_absent(current_day) else ''}")
          for res in reservations],
        marker="‚Ä¢ ", )

    content = Text("üÖøÔ∏è –ú–µ—Å—Ç–æ ", Bold(f"{spot_id}"), ", ",
                   Bold(f"{['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'][day]}"), ":\n\n",
                   drivers_info,
                   "\n\n",
                   as_key_value(Bold(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π"), f"{len(reservations)}"),
                   '' if len(reservations) < 2 else Italic(
                       "\n\n–í –¥–µ–Ω—å –ø—Ä–∏–µ–∑–¥–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã")
                   )
    await callback.message.edit_text(**content.as_kwargs(), reply_markup=builder.as_markup()
                                     )


@router.callback_query(F.data.startswith("reserve_"), flags={"check_driver": True})
async def handle_reservation(callback: CallbackQuery, session, driver, current_day):
    _, spot_id, day = callback.data.split("_")
    spot_id = int(spot_id)
    day = int(day)
    reservation_service = ReservationService(session)
    try:
        await reservation_service.create_reservation({
            "day_of_week": day,
            "parking_spot_id": spot_id,
            "driver_id": driver.id
        })
        await callback.answer("‚úÖ –ú–µ—Å—Ç–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ!")
    except ValueError as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    await handle_day_selection(callback, session, driver, current_day)


@router.callback_query(F.data.startswith("cancel_"), flags={"check_driver": True})
async def handle_cancel_reservation(callback: CallbackQuery, session, driver, current_day):
    _, spot_id, day = callback.data.split("_")
    spot_id = int(spot_id)
    day = int(day)

    reservation_service = ReservationService(session)
    await reservation_service.delete_reservation(driver.id, spot_id, day)
    await callback.answer("üóëÔ∏è –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await handle_day_selection(callback, session, driver, current_day)


@router.callback_query(F.data.startswith("select-spot_"), flags={"check_driver": True})
async def start_reservation_process(callback: CallbackQuery, session, driver, current_day):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞"""
    spot_id = int(callback.data.split("_")[-1])
    current_week_day = current_day.weekday()  # 0-6 (–ø–Ω-–≤—Å)

    await callback.message.edit_text(
        text=f"üÖøÔ∏è –í—ã–±—Ä–∞–Ω–æ –º–µ—Å—Ç–æ {spot_id}.\n\nüî¥ - –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –∫–µ–º-—Ç–æ,\nüü° - –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –∫–µ–º-—Ç–æ –∏ –í–∞–º–∏,\nüü¢ - –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–ª—å–∫–æ –í–∞–º–∏,\n‚ö™ - —Å–≤–æ–±–æ–¥–Ω–æ.\n\n‚úîÔ∏è - —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
        reply_markup=await get_weekdays_keyboard(session, driver, spot_id, current_week_day),
        parse_mode="Markdown"
    )


async def get_weekdays_keyboard(session, driver, spot_id: int, current_day: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏"""
    week_days = [
        ("–ü–Ω", 0), ("–í—Ç", 1), ("–°—Ä", 2), ("–ß—Ç", 3),
        ("–ü—Ç", 4), ("–°–±", 5), ("–í—Å", 6)
    ]
    reservation_service = ReservationService(session)
    builder = InlineKeyboardBuilder()
    for day_name, day_num in week_days:
        reservations = await reservation_service.get_spot_reservations(spot_id, day_num)
        me = any(res.driver_id == driver.id for res in reservations)
        other = any(res.driver_id != driver.id for res in reservations)
        # üî¥- other and not me, üü† - other and me, üü° - only me, üü¢ - free
        status = "üî¥" if other and not me else ("üü°" if other and me else ("üü¢" if me else "‚ö™Ô∏è"))

        builder.add(InlineKeyboardButton(
            text=f"{status} {day_name}" if day_num != current_day else f"{status} {day_name} ‚úîÔ∏è",
            callback_data=f"choose-day_{spot_id}_{day_num}"
        ))
    builder.adjust(4)
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data=f"choose-spots"
    ))
    return builder.as_markup()
