from datetime import timedelta

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.utils.formatting import Text, as_marked_section, Bold, as_key_value, Italic, Code
from aiogram.utils.keyboard import InlineKeyboardBuilder

from handlers.driver_callback import add_button, MyCallback
from models.driver import Driver
from services.reservation_service import ReservationService

router = Router()


@router.callback_query(MyCallback.filter(F.action == "choose-day"),
                       flags={"check_driver": True, "check_callback": True})
async def handle_day_selection(callback: CallbackQuery, callback_data: MyCallback, session, driver: Driver,
                               current_day):
    spot_id = callback_data.spot_id
    day_of_week = callback_data.day_num

    reservation_service = ReservationService(session)
    reservations = await reservation_service.get_spot_reservations(spot_id, day_of_week)

    builder = InlineKeyboardBuilder()
    if any(res.driver_id == driver.id for res in reservations):
        add_button("‚ùå –û—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ", "cancel_spot", driver.chat_id, builder, spot_id, day_of_week)
        builder.add(InlineKeyboardButton(text="üèùÔ∏è –ë—É–¥—É –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å N –¥–Ω–µ–π",
                                         switch_inline_query_current_chat='–ú–µ–Ω—è –Ω–µ –±—É–¥–µ—Ç <–ß–ò–°–õ–û> –¥–Ω—è/–¥–Ω–µ–π'))
    elif all(res.driver.is_absent(current_day + timedelta(days=1)) for res in reservations):
        add_button("‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "reserve_spot", driver.chat_id, builder, spot_id, day_of_week)

    add_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "select-spot", driver.chat_id, builder, spot_id)
    builder.adjust(1)

    drivers_info = Bold("–°–≤–æ–±–æ–¥–Ω–æ!") if not reservations else as_marked_section(
        Bold("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ:"),
        *[as_key_value(f"{res.driver.description}",
                       f"–ø—Ä–∏–µ–¥–µ—Ç –≤ {res.driver.absent_until.strftime('%a %d.%m.%Y') if res.driver.is_absent(current_day) else ''}")
          for res in reservations],
        marker="‚Ä¢ ", )

    content = Text("üÖøÔ∏è –ú–µ—Å—Ç–æ ", Bold(f"{spot_id}"), ", ",
                   Bold(f"{['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'][day_of_week]}"), ":\n\n",
                   drivers_info,
                   "\n\n",
                   as_key_value(Bold(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π"), f"{len(reservations)}"),
                   '' if len(reservations) < 2 else Italic(
                       "\n\n–í –¥–µ–Ω—å –ø—Ä–∏–µ–∑–¥–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã"),
                   Text("\n\n–ï—Å–ª–∏ –≤—ã —É–µ–∑–∂–∞–µ—Ç–µ –≤ –æ—Ç–ø—É—Å–∫ –∏–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫—É, –º–æ–∂–µ—Ç–µ –Ω–µ —Å–Ω–∏–º–∞—Ç—å —Å–≤–æ–π —Ä–µ–∑–µ—Ä–≤, ",
                        "–∞ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π\n", Code("üèùÔ∏è –ë—É–¥—É –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å N –¥–Ω–µ–π"),
                        "\n–ø–æ—Å–ª–µ –≤–∞—à–µ–≥–æ –ø—Ä–∏–µ–∑–¥–∞ –≤—Å–µ —Ä–µ–∑–µ—Ä–≤—ã –±—É–¥—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
                        "–ê –≤–æ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–∞—à–µ –º–µ—Å—Ç–æ –º–æ–≥—É—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∏ "
                        "–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–ª–ª–µ–≥–∏, –≤—Å—Ç–∞–≤ –≤ –æ—á–µ—Ä–µ–¥—å!") if any(
                       res.driver_id == driver.id for res in reservations) else ""
                   )
    await callback.message.edit_text(**content.as_kwargs(), reply_markup=builder.as_markup())


@router.callback_query(MyCallback.filter(F.action == "reserve_spot"),
                       flags={"check_driver": True, "check_callback": True})
async def handle_reservation(callback: CallbackQuery, callback_data: MyCallback, session, driver, current_day):
    spot_id = callback_data.spot_id
    day_of_week = callback_data.day_num
    reservation_service = ReservationService(session)
    try:
        await reservation_service.create_reservation({
            "day_of_week": day_of_week,
            "parking_spot_id": spot_id,
            "driver_id": driver.id
        })
        await callback.answer("‚úÖ –ú–µ—Å—Ç–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ!")
    except ValueError as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    await handle_day_selection(callback, callback_data, session, driver, current_day)


@router.callback_query(MyCallback.filter(F.action == "cancel_spot"),
                       flags={"check_driver": True, "check_callback": True})
async def handle_cancel_reservation(callback: CallbackQuery, callback_data: MyCallback, session, driver, current_day):
    day_of_week = callback_data.day_num

    reservation_service = ReservationService(session)
    await reservation_service.delete_reservation(driver.id, day_of_week)
    await callback.answer("üóëÔ∏è –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await handle_day_selection(callback, callback_data, session, driver, current_day)


@router.callback_query(MyCallback.filter(F.action == "select-spot"),
                       flags={"check_driver": True, "check_callback": True})
async def start_reservation_process(callback: CallbackQuery, callback_data: MyCallback, session, driver, current_day):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞"""
    spot_id = callback_data.spot_id
    current_week_day = current_day.weekday()  # 0-6 (–ø–Ω-–≤—Å)

    content = Text(f"üÖøÔ∏è –í—ã–±—Ä–∞–Ω–æ –º–µ—Å—Ç–æ {spot_id}.\n\n")

    week_days = [
        ("–ü–Ω", 0), ("–í—Ç", 1), ("–°—Ä", 2), ("–ß—Ç", 3),
        ("–ü—Ç", 4), ("–°–±", 5), ("–í—Å", 6)
    ]
    reservation_service = ReservationService(session)
    builder = InlineKeyboardBuilder()
    for day_name, day_num in week_days:
        reservations = await reservation_service.get_spot_reservations(spot_id, day_num)
        me = any(res.driver_id == driver.id for res in reservations)
        other = any(res.driver_id != driver.id for res in reservations)
        # üî¥- other and not me, üü† - other and me, üü° - only me, üü¢ - free
        status = "üî¥" if other and not me else ("üü°" if other and me else ("üü¢" if me else "‚ö™Ô∏è"))
        add_button(f"{status} {day_name}" + (' ‚úîÔ∏è' if day_num == current_week_day else ''),
                   "choose-day", driver.chat_id, builder, spot_id, day_num)
        content += Code(
            f"{status} {day_name}:\t..\t{', '.join(res.driver.title for res in reservations) if reservations else '–º–µ—Å—Ç–æ —Å–≤–æ–±–æ–¥–Ω–æ ü´∂'}\n")
    content += (f"\n‚úîÔ∏è - —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:")
    add_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "choose-spots", driver.chat_id, builder)
    builder.adjust(3, 3, 1)

    await callback.message.edit_text(**content.as_kwargs(), reply_markup=builder.as_markup())
