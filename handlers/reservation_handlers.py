from datetime import datetime

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config.database import async_session_maker
from services.driver_service import DriverService
from services.reservation_service import ReservationService

router = Router()

async def get_weekdays_keyboard(chat_id: int, spot_id: int, current_day: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏"""
    days = [
        ("–ü–Ω", 0), ("–í—Ç", 1), ("–°—Ä", 2),
        ("–ß—Ç", 3), ("–ü—Ç", 4), ("–°–±", 5), ("–í—Å", 6)
    ]
    async with async_session_maker() as session:
        driver_service = DriverService(session)
        driver = await driver_service.get_by_chat_id(chat_id)
        reservation_service = ReservationService(session)
        builder = InlineKeyboardBuilder()
        for day_name, day_num in days:
            reservations = await reservation_service.get_spot_reservations(spot_id, day_num)
            status = "üü†" if any(res.driver_id == driver.id for res in reservations) else ("üî¥" if reservations else "‚ö™Ô∏è")
            builder.add(InlineKeyboardButton(
                text=f"{status} {day_name}",
                callback_data=f"choose-day_{spot_id}_{day_num}"
            ))
        builder.adjust(4)
        builder.add(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"choose-spots"
        ))
        return builder.as_markup()


@router.callback_query(F.data.startswith("choose-day_"))
async def handle_day_selection(callback: CallbackQuery):
    _, spot_id, day = callback.data.split("_")
    spot_id = int(spot_id)
    day = int(day)
    async with async_session_maker() as session:
        driver_service = DriverService(session)
        driver = await driver_service.get_by_chat_id(callback.from_user.id)

        reservation_service = ReservationService(session)
        reservations = await reservation_service.get_spot_reservations(spot_id, day)

        builder = InlineKeyboardBuilder()
        if any(res.driver_id == driver.id for res in reservations):
            builder.add(InlineKeyboardButton(
                text="‚ùå –û—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ",
                callback_data=f"cancel_{spot_id}_{day}"
            ))
        else:
            builder.add(InlineKeyboardButton(
                text="‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=f"reserve_{spot_id}_{day}"
            ))

        builder.add(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"select-spot_{spot_id}"
        ))

        await callback.message.edit_text(
            f"–ú–µ—Å—Ç–æ {spot_id}, {['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'][day]}:\n"
            f"–°—Ç–∞—Ç—É—Å: {len(reservations)} —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π",
            reply_markup=builder.as_markup()
        )


@router.callback_query(F.data.startswith("reserve_"))
async def handle_reservation(callback: CallbackQuery):
    _, spot_id, day = callback.data.split("_")
    spot_id = int(spot_id)
    day = int(day)
    async with async_session_maker() as session:
        reservation_service = ReservationService(session)
        driver_service = DriverService(session)

        driver = await driver_service.get_by_chat_id(callback.from_user.id)

        try:
            await reservation_service.create_reservation({
                "day_of_week": day,
                "parking_spot_id": spot_id,
                "driver_id": driver.id
            })
            await callback.answer("‚úÖ –ú–µ—Å—Ç–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ!")
        except ValueError as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        await handle_day_selection(callback)


@router.callback_query(F.data.startswith("cancel_"))
async def handle_cancelation(callback: CallbackQuery):
    _, spot_id, day = callback.data.split("_")
    spot_id = int(spot_id)
    day = int(day)

    async with async_session_maker() as session:
        reservation_service = ReservationService(session)
        driver_service = DriverService(session)

        driver = await driver_service.get_by_chat_id(callback.from_user.id)

        await reservation_service.delete_reservation(driver.id, spot_id, day)
        await callback.answer("üóëÔ∏è –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await handle_day_selection(callback)


@router.callback_query(F.data.startswith("select-spot_"))
async def start_reservation_process(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞"""
    spot_id = int(callback.data.split("_")[-1])
    current_day = datetime.today().weekday()  # 0-6 (–ø–Ω-–≤—Å)

    await callback.message.edit_text(
        text=f"–í—ã–±—Ä–∞–Ω–æ –º–µ—Å—Ç–æ {spot_id}.\n\nüü† - –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –í–∞–º–∏, \nüî¥ - –∑–∞–Ω—è—Ç–æ –∫–µ–º-—Ç–æ, \n‚ö™Ô∏è - —Å–≤–æ–±–æ–¥–Ω–æ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
        reply_markup=await get_weekdays_keyboard(callback.from_user.id, spot_id, current_day)
    )
