from aiogram import Router, F
from aiogram.filters import Command, or_f
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from handlers.driver_callback import MyCallback
from handlers.user_handlers import show_status_callback
from models.driver import Driver
from models.user_audit import UserActionType
from services.audit_service import AuditService
from services.notification_sender import send_alarm
from services.queue_service import QueueService

router = Router()


@router.message(or_f(Command("queue"), F.text.regexp(r"(?i)(.*–ø–æ–∫–∞.* –æ—á–µ—Ä–µ–¥—å)|(.*–æ—á–µ—Ä–µ–¥—å –ø–∞—Ä–∫–æ–≤–∫–∏)")),
                flags={"check_driver": True})
async def queue_command(message: Message, session, driver, is_private):
    queue_service = QueueService(session)
    queue_all = await queue_service.get_all()
    await message.reply(
        f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏\n\n"
        f"–í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(queue_all)} —á–µ–ª–æ–≤–µ–∫(–∞)\n"
        # –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏
        f"{''.join(f'‚Ä¢ {queue.driver.description}{(" ‚ùóÔ∏èüèÜ‚ùóÔ∏è " + str(queue.spot_id) + " –º–µ—Å—Ç–æ –¥–æ " + queue.choose_before.strftime('%H:%M')) if queue.spot_id else ''}\n' for queue in queue_all)}"
    )


@router.callback_query(MyCallback.filter(F.action == "leave-queue"),
                       flags={"check_driver": True, "check_callback": True})
async def leave_queue_callback(callback: CallbackQuery, session: AsyncSession, driver: Driver, current_day, is_private):
    await leave_queue(callback, session, driver, current_day)
    await show_status_callback(callback, session, driver, current_day, is_private)


@router.callback_query(MyCallback.filter(F.action == "join-queue"),
                       flags={"check_driver": True, "check_callback": True})
async def join_queue_callback(callback: CallbackQuery, session: AsyncSession, driver: Driver, current_day, is_private):
    await join_queue(callback, session, driver, current_day)
    await show_status_callback(callback, session, driver, current_day, is_private)


@router.message(F.text.regexp(r"(?i)(.*–ø–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å)|(.*–≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏)"), flags={"check_driver": True})
async def leave_queue(message, session, driver, current_day):
    queue_service = QueueService(session)
    in_queue = await queue_service.is_driver_in_queue(driver)
    if not in_queue:
        await send_alarm(message, f"‚ö†Ô∏è –í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏")
        return
    await queue_service.leave_queue(driver)
    await send_alarm(message, f"üëã –¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏")
    await AuditService(session).log_action(driver.id, UserActionType.LEAVE_QUEUE, current_day,
                                           description=f"{driver.description} –ø–æ–∫–∏–Ω—É–ª –æ—á–µ—Ä–µ–¥—å")


@router.message(F.text.regexp(r"(?i)(.*–≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å)|(.*—Ö–æ—á—É —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ)"), flags={"check_driver": True})
async def join_queue(message, session, driver, current_day):
    queue_service = QueueService(session)
    in_queue = await queue_service.is_driver_in_queue(driver)
    if in_queue:
        await send_alarm(message, f"‚ö†Ô∏è –í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏")
    else:
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –º–µ—Å—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ, —Ç–æ –Ω–∏–∫–∞–∫–æ–π –æ—á–µ—Ä–µ–¥–∏!
        await session.refresh(driver, ["current_spots"])
        if driver.get_occupied_spots():
            await send_alarm(message, f"‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–Ω–∏–º–∞–µ—Ç–µ –º–µ—Å—Ç–æ: {[spot.id for spot in driver.get_occupied_spots()]}")
        else:
            await queue_service.join_queue(driver)
            await send_alarm(message, f"‚úÖ –í—ã –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å")
            await AuditService(session).log_action(driver.id, UserActionType.JOIN_QUEUE, current_day,
                                                   description=f"{driver.description} –≤—Å—Ç–∞–ª –≤ –æ—á–µ—Ä–µ–¥—å")
