import logging
import os
from datetime import date

import requests
from aiogram.utils.formatting import Bold, Italic, Code

logger = logging.getLogger(__name__)

API_KEY = os.getenv("OPENWEATHERMAP_API_KEY")
CITY = "Saint Petersburg,RU"
BASE_URL = "http://api.openweathermap.org/data/2.5/forecast"
params = {
    "q": CITY,
    "appid": API_KEY,
    "units": "metric",
    "lang": "ru"
}
weather_map = {
    "01": {"icon": "‚òÄ", "sun_alpha": 120},
    "02": {"icon": "‚õÖÔ∏è", "sun_alpha": 100, "num_clouds": 5},
    "03": {"icon": "‚õÖÔ∏è", "sun_alpha": 80, "num_clouds": 15},
    "04": {"icon": "üå•Ô∏è", "sun_alpha": 30, "num_clouds": 20},
    "09": {"icon": "üå¶Ô∏è", "sun_alpha": 10, "rain_drop_count": 400, "num_clouds": 20},
    "10": {"icon": "üåßÔ∏è", "rain_drop_count": 600, "num_clouds": 30},
    "11": {"icon": "‚õàÔ∏è", "rain_drop_count": 1000, "num_clouds": 40},
    "13": {"icon": "üå®Ô∏è", "num_clouds": 30},
    "50": {"icon": "üå´Ô∏è", "num_clouds": 50}
}


class WeatherService:
    def __init__(self):
        pass

    async def get_weather_test(self, day: date) -> (str, dict, str):
        return "+25¬∞", {"icon": "‚òÄ", "sun_alpha": 120}, "—Ç–µ—Å—Ç"

    async def get_weather_string(self, day: date) -> (str, dict, str):
        try:
            response = requests.get(BASE_URL, params=params)
            data = response.json()
            logger.debug(f"{data}")
            day_request = day.strftime("%Y-%m-%d")
            temp = ""
            weather = dict()
            desc = ""
            for forecast in data["list"]:
                date = forecast["dt_txt"].split()[0]
                if date == day_request:
                    time = forecast["dt_txt"].split()[1][:5]
                    if temp == "" or time == "12:00":
                        temp = f"{int(forecast["main"]["temp"]):+3d}¬∞"
                        icon = forecast["weather"][0]["icon"][:2]
                        weather = weather_map.get(icon, dict())
                        desc = forecast["weather"][0]["description"]
                    if time == "12:00":
                        return temp, weather, desc
            return temp, weather, desc
        except:
            return "", dict(), ""

    async def get_weather_content(self, day: date):
        is_ok = False
        content = Bold(f"–ü–æ–≥–æ–¥–∞ –Ω–∞ {day.strftime('%a %d.%m.%Y')}:")
        try:
            response = requests.get(BASE_URL, params=params)
            data = response.json()
            logger.debug(f"{data}")
            day_request = day.strftime("%Y-%m-%d")

            for forecast in data["list"]:
                date = forecast["dt_txt"].split()[0]
                if date == day_request:
                    is_ok = True
                    time = forecast["dt_txt"].split()[1][:5]
                    temp = f"{int(forecast["main"]["temp"]):+3d}"
                    desc = forecast["weather"][0]["description"]
                    icon = forecast["weather"][0]["icon"][:2]
                    content += Code(f"\n{time} {temp}¬∞C {weather_map.get(icon, dict()).get("icon", '')} {desc}")
        except:
            pass
        if not is_ok:
            content += Italic("\n–°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ü§∑")
        return content

    async def get_weekly_weather_content(self):
        is_ok = False
        content = Bold("–ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n")
        try:
            response = requests.get(BASE_URL, params=params)
            data = response.json()
            logger.debug(f"Weekly data: {data}")

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –¥–∞—Ç–∞–º
            forecast_by_date = {}
            for forecast in data["list"]:
                day_str = forecast["dt_txt"].split()[0]
                if day_str not in forecast_by_date:
                    forecast_by_date[day_str] = []
                forecast_by_date[day_str].append(forecast)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            for day_str in sorted(forecast_by_date.keys()):
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç date –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                current_day = date.fromisoformat(day_str)
                day_header = Bold(f"–ü–æ–≥–æ–¥–∞ –Ω–∞ {current_day.strftime('%a %d.%m.%Y')}:")
                day_content = day_header

                for forecast in forecast_by_date[day_str]:
                    time_str = forecast["dt_txt"].split()[1][:5]
                    temp = f"{int(forecast["main"]["temp"]):+3d}"
                    desc = forecast["weather"][0]["description"]
                    icon = forecast["weather"][0]["icon"][:2]
                    day_content += Code(f"\n{time_str} {temp}¬∞C {weather_map.get(icon, dict()).get("icon", '')} {desc}")
                    is_ok = True

                content += day_content + "\n\n"
        except:
            pass

        # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ –≤–µ—Ä–Ω—É–ª –ø—Ä–æ–≥–Ω–æ–∑—ã - —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not is_ok:
            content = Italic("–°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ü§∑")
        return content
