from enum import Enum as PyEnum

from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup

from models.driver import Driver


class EventType(PyEnum):
    """
    –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    SPOT_OCCUPIED = {"text": "–ú–µ—Å—Ç–æ {spot_id} –∑–∞–Ω—è–ª {driver_from.description} /status", "button_text": "–ó–∞–Ω—è–ª–∏ –º–µ—Å—Ç–æ"}
    SPOT_RELEASED = {"text": "–ú–µ—Å—Ç–æ {spot_id} –æ—Å–≤–æ–±–æ–¥–∏–ª {driver_from.description} /status",
                     "button_text": "–û—Å–≤–æ–±–æ–¥–∏–ª–∏ –º–µ—Å—Ç–æ"}
    PARTNER_SAYS_TODAY_SPOT_FREE = {
        "text": "{driver_from.description} —Å–∫–∞–∑–∞–ª, —á—Ç–æ –Ω–µ –ø—Ä–∏–µ–¥–µ—Ç –∏ –º–µ—Å—Ç–æ {spot_id} —Å–≤–æ–±–æ–¥–Ω–æ /status",
        "button_text": "–ù–∞–ø–∞—Ä–Ω–∏–∫ –Ω–µ –ø—Ä–∏–µ–¥–µ—Ç"}
    KARMA_CHANGED = {"text": "üíü –í–∞—à–∞ –∫–∞—Ä–º–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ {karma_change}", "button_text": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä–º—ã"}


class NotificationSender:
    """
    –ö–ª–∞—Å—Å-–æ—Ç–ø—Ä–∞–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç.
    """

    def __init__(self, bot: Bot):
        self.bot = bot

    async def send_to_driver(self, event_type: EventType, driver_from: Driver, driver_to: Driver, add_message: str,
                             spot_id: int, karma_change: int, keyboard: InlineKeyboardMarkup = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—é —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π."""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ —É –≤–æ–¥–∏—Ç–µ–ª—è driver_to
        if not driver_to.attributes.get(event_type.name, True):
            return
        message = event_type.value["text"].format(spot_id=spot_id, driver_from=driver_from, driver_to=driver_to,
                                                  karma_change=karma_change)
        if add_message is not None and add_message != "":
            message += "\n\n" + add_message
        await self.send_notification(driver_to.chat_id, message, keyboard)

    async def send_notification(self, user_id: int, message: str, keyboard: InlineKeyboardMarkup = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π."""
        await self.bot.send_message(chat_id=user_id, text=message, reply_markup=keyboard)
